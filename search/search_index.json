{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stemmer","stopWordFilter","trimmer"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>A modern, fully static, fast, secure fully proxied, highly customizable application dashboard with integrations for over 100 services and translations into multiple languages. Easily configured via YAML files or through docker label discovery.</p>"},{"location":"configs/","title":"Configuration","text":"<p>Homepage uses YAML for configuration, YAML stands for \"YAML Ain't Markup Language.\". It's a human-readable data serialization format that's a superset of JSON. Great for config files, easy to read and write. Supports complex data types like lists and objects. Indentation matters. If you already use Docker Compose, you already use YAML.</p> <p>Here are some tips when writing YAML:</p> <ol> <li>Use Indentation Carefully: YAML relies on indentation, not brackets.</li> <li>Avoid Tabs: Stick to spaces for indentation to avoid parsing errors. 2 spaces are common.</li> <li>Quote Strings: Use single or double quotes for strings with special characters, this is especially important for API keys.</li> <li>Key-Value Syntax: Use key: value format. Colon must be followed by a space.</li> <li>Validate: Always validate your YAML with a linter before deploying.</li> </ol> <p>You can find tons of online YAML validators, here's one: https://codebeautify.org/yaml-validator, heres another: https://jsonformatter.org/yaml-validator.</p>"},{"location":"configs/bookmarks/","title":"Bookmarks","text":"<p>Bookmarks are configured in the <code>bookmarks.yaml</code> file. They function much the same as Services, in how groups and lists work. They're just much simpler, smaller, and contain no extra features other than being a link out.</p> <p>The design of homepage expects <code>abbr</code> to be 2 letters, but is not otherwise forced.</p> <p>You can also use an icon for bookmarks similar to the options for service icons. If both icon and abbreviation are supplied, the icon takes precedence.</p> <p>By default, the description will use the hostname of the link, but you can override it with a custom description.</p> <pre><code>---\n- Developer:\n    - Github:\n        - abbr: GH\n          href: https://github.com/\n\n- Social:\n    - Reddit:\n        - icon: reddit.png\n          href: https://reddit.com/\n          description: The front page of the internet\n\n- Entertainment:\n    - YouTube:\n        - abbr: YT\n          href: https://youtube.com/\n</code></pre> <p>which renders to (depending on your theme, etc.):</p> <p></p> <p>The default bookmarks.yaml is a working example.</p>"},{"location":"configs/custom-css-js/","title":"Custom CSS & JS","text":"<p>As of version v0.6.30 homepage supports adding your own custom css &amp; javascript. Please do so at your own risk.</p> <p>To add custom css simply edit the <code>custom.css</code> file under your config directory, similarly for javascript you would edit <code>custom.js</code>. You can then target elements in homepage with various classes / ids to customize things to your liking.</p> <p>You can also set a specific <code>id</code> for a service or bookmark to target with your custom css or javascript, e.g.</p> <pre><code>Service:\n    id: myserviceid\n    icon: icon.png\n    ...\n</code></pre>"},{"location":"configs/docker/","title":"Docker","text":"<p>Docker instances are configured inside the <code>docker.yaml</code> file. Both IP:PORT and Socket connections are supported.</p> <p>For IP:PORT, simply make sure your Docker instance has been configured to accept API traffic over the HTTP API.</p> <pre><code>my-remote-docker:\n  host: 192.168.0.101\n  port: 2375\n</code></pre>"},{"location":"configs/docker/#using-docker-tls","title":"Using Docker TLS","text":"<p>Since Docker supports connecting with TLS and client certificate authentication, you can include TLS details when connecting to the HTTP API. Further details of setting up Docker to accept TLS connections, and generation of the keys and certs can be found in the Docker documentation. The file entries are relative to the <code>config</code> directory (location of <code>docker.yaml</code> file).</p> <pre><code>my-remote-docker:\n  host: 192.168.0.101\n  port: 2375\n  tls:\n    keyFile: tls/key.pem\n    caFile: tls/ca.pem\n    certFile: tls/cert.pem\n</code></pre>"},{"location":"configs/docker/#using-docker-socket-proxy","title":"Using Docker Socket Proxy","text":"<p>Due to security concerns with exposing the docker socket directly, you can use a docker-socket-proxy container to expose the docker socket on a more restricted and secure API.</p> <p>Here is an example docker-compose file that will expose the docker socket, and then connect to it from the homepage container:</p> <pre><code>dockerproxy:\n  image: ghcr.io/tecnativa/docker-socket-proxy:latest\n  container_name: dockerproxy\n  environment:\n    - CONTAINERS=1 # Allow access to viewing containers\n    - SERVICES=1 # Allow access to viewing services (necessary when using Docker Swarm)\n    - TASKS=1 # Allow access to viewing tasks (necessary when using Docker Swarm)\n    - POST=0 # Disallow any POST operations (effectively read-only)\n  ports:\n    - 127.0.0.1:2375:2375\n  volumes:\n    - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only\n  restart: unless-stopped\n\nhomepage:\n  image: ghcr.io/gethomepage/homepage:latest\n  container_name: homepage\n  volumes:\n    - /path/to/config:/app/config\n  ports:\n    - 3000:3000\n  restart: unless-stopped\n</code></pre> <p>Then, inside of your <code>docker.yaml</code> settings file, you'd configure the docker instance like so:</p> <pre><code>my-docker:\n  host: dockerproxy\n  port: 2375\n</code></pre> <p>Use <code>protocol: https</code> if you\u2019re connecting through a reverse proxy (e.g., Traefik) that serves the Docker API over HTTPS:</p> <pre><code>my-docker:\n  host: dockerproxy\n  port: 443\n  protocol: https\n</code></pre> <p>Note</p> <p>Note: This does not require TLS certificates if the proxy handles encryption. Do not use <code>protocol: https</code> unless you\u2019re sure the target host supports HTTPS.</p> <p>You can also include <code>headers</code> for the connection, for example, if you are using a reverse proxy that requires authentication:</p> <pre><code>my-docker:\n  host: dockerproxy\n  port: 443\n  protocol: https\n  headers:\n    Authorization: Basic &lt;base64-encoded-credentials&gt;\n</code></pre>"},{"location":"configs/docker/#using-socket-directly","title":"Using Socket Directly","text":"<p>If you'd rather use the socket directly, first make sure that you're passing the local socket into the Docker container.</p> <p>Note</p> <p>In order to use the socket directly homepage must be running as root</p> <pre><code>homepage:\n  image: ghcr.io/gethomepage/homepage:latest\n  container_name: homepage\n  volumes:\n    - /path/to/config:/app/config\n    - /var/run/docker.sock:/var/run/docker.sock # pass local proxy\n  ports:\n    - 3000:3000\n  restart: unless-stopped\n</code></pre> <p>If you're using <code>docker run</code>, this would be <code>-v /var/run/docker.sock:/var/run/docker.sock</code>.</p> <p>Then, inside of your <code>docker.yaml</code> settings file, you'd configure the docker instance like so:</p> <pre><code>my-docker:\n  socket: /var/run/docker.sock\n</code></pre>"},{"location":"configs/docker/#services","title":"Services","text":"<p>Once you've configured your docker instances, you can then apply them to your services, to get stats and status reporting shown.</p> <p>Inside of the service you'd like to connect to docker:</p> <pre><code>- Emby:\n  icon: emby.png\n  href: \"http://emby.home/\"\n  description: Media server\n  server: my-docker # The docker server that was configured\n  container: emby # The name of the container you'd like to connect\n</code></pre>"},{"location":"configs/docker/#automatic-service-discovery","title":"Automatic Service Discovery","text":"<p>Homepage features automatic service discovery for containers with the proper labels attached, all configuration options can be applied using dot notation, beginning with <code>homepage</code>.</p> <p>Below is an example of the same service entry shown above, as docker labels.</p> <pre><code>services:\n  emby:\n    image: lscr.io/linuxserver/emby:latest\n    container_name: emby\n    ports:\n      - 8096:8096\n    restart: unless-stopped\n    labels:\n      - homepage.group=Media\n      - homepage.name=Emby\n      - homepage.icon=emby.png\n      - homepage.href=http://emby.home/\n      - homepage.description=Media server\n</code></pre> <p>When your Docker instance has been properly configured, this service will be automatically discovered and added to your Homepage. You do not need to specify the <code>server</code> or <code>container</code> values, as they will be automatically inferred.</p> <p>When using docker swarm use deploy/labels</p>"},{"location":"configs/docker/#widgets","title":"Widgets","text":"<p>You may also configure widgets, along with the standard service entry, again, using dot notation.</p> <pre><code>labels:\n  - homepage.group=Media\n  - homepage.name=Emby\n  - homepage.icon=emby.png\n  - homepage.href=http://emby.home/\n  - homepage.description=Media server\n  - homepage.widget.type=emby\n  - homepage.widget.url=http://emby.home\n  - homepage.widget.key=yourembyapikeyhere\n  - homepage.widget.fields=[\"field1\",\"field2\"] # optional\n</code></pre> <p>Multiple widgets can be specified by incrementing the index, e.g.</p> <pre><code>labels: ...\n  - homepage.widgets[0].type=emby\n  - homepage.widgets[0].url=http://emby.home\n  - homepage.widgets[0].key=yourembyapikeyhere\n  - homepage.widgets[1].type=uptimekuma\n  - homepage.widgets[1].url=http://uptimekuma.home\n  - homepage.widgets[1].slug=youreventslughere\n</code></pre> <p>You can add specify fields for e.g. the CustomAPI widget by using array-style dot notation:</p> <pre><code>labels:\n  - homepage.group=Media\n  - homepage.name=Emby\n  - homepage.icon=emby.png\n  - homepage.href=http://emby.home/\n  - homepage.description=Media server\n  - homepage.widget.type=customapi\n  - homepage.widget.url=http://argus.service/api/v1/service/summary/emby\n  - homepage.widget.mappings[0].label=Deployed Version\n  - homepage.widget.mappings[0].field.status=deployed_version\n  - homepage.widget.mappings[1].label=Latest Version\n  - homepage.widget.mappings[1].field.status=latest_version\n</code></pre>"},{"location":"configs/docker/#docker-swarm","title":"Docker Swarm","text":"<p>Docker swarm is supported and Docker services are specified with the same <code>server</code> and <code>container</code> notation. To enable swarm support you will need to include a <code>swarm</code> setting in your docker.yaml, e.g.</p> <pre><code>my-docker:\n  socket: /var/run/docker.sock\n  swarm: true\n</code></pre> <p>For the automatic service discovery to discover all services it is important that homepage should be deployed on a manager node. Set deploy requirements to the master node in your stack yaml config, e.g.</p> <pre><code>....\n  deploy:\n    placement:\n      constraints:\n        - node.role == manager\n...\n</code></pre> <p>In order to detect every service within the Docker swarm it is necessary that service labels should be used and not container labels. Specify the homepage labels as:</p> <pre><code>....\n  deploy:\n    labels:\n      - homepage.icon=foobar\n...\n</code></pre>"},{"location":"configs/docker/#multiple-homepage-instances","title":"Multiple Homepage Instances","text":"<p>The optional field <code>instanceName</code> can be configured in settings.yaml to differentiate between multiple homepage instances.</p> <p>To limit a label to an instance, insert <code>.instance.{{instanceName}}</code> after the <code>homepage</code> prefix.</p> <pre><code>labels:\n  - homepage.group=Media\n  - homepage.name=Emby\n  - homepage.icon=emby.png\n  - homepage.instance.internal.href=http://emby.lan/\n  - homepage.instance.public.href=https://emby.mydomain.com/\n  - homepage.description=Media server\n</code></pre>"},{"location":"configs/docker/#ordering","title":"Ordering","text":"<p>As of v0.6.4 discovered services can include an optional <code>weight</code> field to determine sorting such that:</p> <ul> <li>Default weight for discovered services is 0</li> <li>Default weight for configured services is their index within their group scaled by 100, i.e. (index + 1) * 100</li> <li>If two items have the same weight value, then they will be sorted by name</li> </ul>"},{"location":"configs/docker/#show-stats","title":"Show stats","text":"<p>You can show the docker stats by clicking the status indicator but this can also be controlled per-service with:</p> <pre><code>- Example Service:\n  ...\n  showStats: true\n</code></pre> <p>Also see the settings for show docker stats.</p>"},{"location":"configs/info-widgets/","title":"Information Widgets","text":"<p>Information widgets are widgets that provide information about your system or environment and are displayed at the top of the homepage. You can find a list of all available info widgets under the Info Widgets section.</p> <p>Info widgets are defined in the widgets.yaml</p> <p>Each widget has its own configuration options, which are detailed in the widget's documentation.</p>"},{"location":"configs/info-widgets/#layout","title":"Layout","text":"<p>Info widgets are displayed in the order they are defined in the <code>widgets.yaml</code> file. You can change the order by moving the widgets around in the file. However, some widgets (weather, search and datetime) are aligned to the right side of the screen which can affect the layout of the widgets.</p>"},{"location":"configs/info-widgets/#adding-a-link","title":"Adding A Link","text":"<p>You can add a link to an info widget such as the logo or text widgets by adding an <code>href</code> option, for example:</p> <pre><code>logo:\n  href: https://example.com\n  target: _blank # Optional, can be set in settings\n</code></pre>"},{"location":"configs/kubernetes/","title":"Kubernetes","text":"<p>The Kubernetes connectivity has the following requirements:</p> <ul> <li>Kubernetes 1.19+</li> <li>Metrics Service</li> <li>An Ingress controller</li> <li>Optionally: Gateway-API</li> </ul> <p>The Kubernetes connection is configured in the <code>kubernetes.yaml</code> file. There are 3 modes to choose from:</p> <ul> <li>disabled - disables kubernetes connectivity</li> <li>default - uses the default kubeconfig resolution</li> <li>cluster - uses a service account inside the cluster</li> </ul> <pre><code>mode: default\n</code></pre> <p>To configure Kubernetes gateway-api, ingress or ingressRoute service discovery, add one or multiple of the following settings.</p> <p>Example settings:</p> <pre><code>ingress: true # default, enable ingress only\n</code></pre> <p>or</p> <pre><code>ingress: true # default, enable ingress\ntraefik: true # enable traefik ingressRoute\ngateway: true # enable gateway-api\n</code></pre>"},{"location":"configs/kubernetes/#services","title":"Services","text":"<p>Once the Kubernetes connection is configured, individual services can be configured to pull statistics. Only CPU and Memory are currently supported.</p> <p>Inside of the service you'd like to connect to a pod:</p> <pre><code>- Emby:\n  icon: emby.png\n  href: \"http://emby.home/\"\n  description: Media server\n  namespace: media # The kubernetes namespace the app resides in\n  app: emby # The name of the deployed app\n</code></pre> <p>The <code>app</code> field is used to create a label selector, in this example case it would match pods with the label: <code>app.kubernetes.io/name=emby</code>.</p> <p>Sometimes this is insufficient for complex or atypical application deployments. In these cases, the <code>podSelector</code> field can be used. Any field selector can be used with it, so it allows for some very powerful selection capabilities.</p> <p>For instance, it can be utilized to roll multiple underlying deployments under one application to see a high-level aggregate:</p> <pre><code>- Element Chat:\n    icon: matrix-light.png\n    href: https://chat.example.com\n    description: Matrix Synapse Powered Chat\n    app: matrix-element\n    namespace: comms\n    podSelector: &gt;-\n      app.kubernetes.io/instance in (\n          matrix-element,\n          matrix-media-repo,\n          matrix-media-repo-postgresql,\n          matrix-synapse\n      )\n</code></pre> <p>Note</p> <p>A blank string as a podSelector does not deactivate it, but will actually select all pods in the namespace. This is a useful way to capture the resource usage of a complex application siloed to a single namespace, like Longhorn.</p>"},{"location":"configs/kubernetes/#automatic-service-discovery","title":"Automatic Service Discovery","text":"<p>Homepage features automatic service discovery by Ingress annotations. All configuration options can be applied using typical annotation syntax, beginning with <code>gethomepage.dev/</code>.</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: emby\n  annotations:\n    gethomepage.dev/enabled: \"true\"\n    gethomepage.dev/description: Media Server\n    gethomepage.dev/group: Media\n    gethomepage.dev/icon: emby.png\n    gethomepage.dev/name: Emby\n    gethomepage.dev/widget.type: \"emby\"\n    gethomepage.dev/widget.url: \"https://emby.example.com\"\n    gethomepage.dev/pod-selector: \"\"\n    gethomepage.dev/weight: 10 # optional\n    gethomepage.dev/instance: \"public\" # optional\nspec:\n  rules:\n    - host: emby.example.com\n      http:\n        paths:\n          - backend:\n              service:\n                name: emby\n                port:\n                  number: 8080\n            path: /\n            pathType: Prefix\n</code></pre> <p>When the Kubernetes cluster connection has been properly configured, this service will be automatically discovered and added to your Homepage. You do not need to specify the <code>namespace</code> or <code>app</code> values, as they will be automatically inferred.</p> <p>If you are using multiple instances of homepage, an <code>instance</code> annotation can be specified to limit services to a specific instance. If no instance is provided, the service will be visible on all instances.</p> <p>If you have a single service that needs to be shown on multiple specific instances of homepage (but not on all of them), the service can be annotated by multiple <code>instance.name</code> annotations, where <code>name</code> can be the names of your specific multiple homepage instances. For example, a service that is annotated with <code>gethomepage.dev/instance.public: \"\"</code> and <code>gethomepage.dev/instance.internal: \"\"</code> will be shown on <code>public</code> and <code>internal</code> homepage instances.</p> <p>Use the <code>gethomepage.dev/pod-selector</code> selector to specify the pod used for the health check. For example, a service that is annotated with <code>gethomepage.dev/pod-selector: app.kubernetes.io/name=deployment</code> would link to a pod with the label <code>app.kubernetes.io/name: deployment</code>.</p>"},{"location":"configs/kubernetes/#traefik-ingressroute-support","title":"Traefik IngressRoute support","text":"<p>Homepage can also read ingresses defined using the Traefik IngressRoute custom resource definition. Due to the complex nature of Traefik routing rules, it is required for the <code>gethomepage.dev/href</code> annotation to be set:</p> <pre><code>apiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: emby\n  annotations:\n    gethomepage.dev/href: \"https://emby.example.com\"\n    gethomepage.dev/enabled: \"true\"\n    gethomepage.dev/description: Media Server\n    gethomepage.dev/group: Media\n    gethomepage.dev/icon: emby.png\n    gethomepage.dev/app: emby-app # optional, may be needed if app.kubernetes.io/name != ingress metadata.name\n    gethomepage.dev/name: Emby\n    gethomepage.dev/widget.type: \"emby\"\n    gethomepage.dev/widget.url: \"https://emby.example.com\"\n    gethomepage.dev/pod-selector: \"\"\n    gethomepage.dev/weight: 10 # optional\n    gethomepage.dev/instance: \"public\" # optional\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - kind: Rule\n      match: Host(`emby.example.com`)\n      services:\n        - kind: Service\n          name: emby\n          namespace: emby\n          port: 8080\n          scheme: http\n          strategy: RoundRobin\n          weight: 10\n</code></pre> <p>If the <code>href</code> attribute is not present, Homepage will ignore the specific IngressRoute.</p>"},{"location":"configs/kubernetes/#gateway-api-httproute-support","title":"Gateway API HttpRoute support","text":"<p>Homepage also features automatic service discovery for Gateway API. Service definitions are read by annotating the HttpRoute custom resource definition and are indentical to the Ingress example as defined in Automatic Service Discovery.</p> <p>To enable Gateway API HttpRoute update <code>kubernetes.yaml</code> to include:</p> <pre><code>gateway: true # enable gateway-api\n</code></pre>"},{"location":"configs/kubernetes/#using-the-unoffocial-helm-chart","title":"Using the unoffocial helm chart?","text":"<p>If you are using the unofficial helm chart ensure that the <code>ClusterRole</code> has required permissions for <code>gateway.networking.k8s.io</code>.</p> <p>See ClusterRole and ClusterRoleBinding</p>"},{"location":"configs/kubernetes/#caveats","title":"Caveats","text":"<p>Similarly to Docker service discovery, there currently is no rigid ordering to discovered services and discovered services will be displayed above those specified in the <code>services.yaml</code>.</p>"},{"location":"configs/proxmox/","title":"Proxmox","text":"<p>The Proxmox connection is configured in the <code>proxmox.yaml</code> file. See Create token section below for details on how to generate the required API token. You can configure multiple nodes - be sure to use the exact <code>proxmoxNode</code> identifier!</p> <pre><code>pve:\n  url: https://proxmox.host.or.ip:8006\n  token: username@pam!Token ID\n  secret: secret\n</code></pre>"},{"location":"configs/proxmox/#services","title":"Services","text":"<p>Once the Proxmox connection is configured, individual services can be configured to pull statistics of VMs or LXCs. Only CPU and Memory are currently supported.</p>"},{"location":"configs/proxmox/#configuration-options","title":"Configuration Options","text":"<ul> <li><code>proxmoxNode</code>: The name of the Proxmox node where your VM/LXC is running, must match with a node configured in the <code>proxmox.yaml</code></li> <li><code>proxmoxVMID</code>: The ID of the Proxmox VM or LXC container</li> <li><code>proxmoxType</code>: (Optional) The type of Proxmox virtual machine. Defaults to <code>qemu</code> for VMs, but can be set to <code>lxc</code> for LXC containers</li> </ul>"},{"location":"configs/proxmox/#examples","title":"Examples","text":"<p>For a QEMU VM (default):</p> <pre><code>- HomeAssistant:\n  icon: home-assistant.png\n  href: http://homeassistant.local/\n  description: Home automation\n  proxmoxNode: pve\n  proxmoxVMID: 101\n  # proxmoxType: qemu # This is the default, so it can be omitted\n</code></pre> <p>For an LXC container:</p> <pre><code>- Nginx:\n  icon: nginx.png\n  href: http://nginx.local/\n  description: Web server\n  proxmoxNode: pve\n  proxmoxVMID: 200\n  proxmoxType: lxc\n</code></pre>"},{"location":"configs/proxmox/#create-token","title":"Create token","text":"<p>You will need to generate an API Token for new or an existing user. Here is an example of how to do this for a new user.</p> <ol> <li>Navigate to the Proxmox portal, click on Datacenter</li> <li>Expand Permissions, click on Groups</li> <li>Click the Create button</li> <li>Name the group something informative, like api-ro-users</li> <li>Click on the Permissions \"folder\"</li> <li>Click Add -&gt; Group Permission<ul> <li>Path: /</li> <li>Group: group from bullet 4 above</li> <li>Role: PVEAuditor</li> <li>Propagate: Checked</li> </ul> </li> <li>Expand Permissions, click on Users</li> <li>Click the Add button<ul> <li>User name: something informative like <code>api</code></li> <li>Realm: Linux PAM standard authentication</li> <li>Group: group from bullet 4 above</li> </ul> </li> <li>Expand Permissions, click on API Tokens</li> <li>Click the Add button<ul> <li>User: user from bullet 8 above</li> <li>Token ID: something informative like the application or purpose like <code>homepage</code></li> <li>Privilege Separation: Checked</li> </ul> </li> <li>Go back to the \"Permissions\" menu</li> <li>Click Add -&gt; API Token Permission<ul> <li>Path: /</li> <li>API Token: select the Token ID created in Step 10</li> <li>Role: PVE Auditor</li> <li>Propagate: Checked</li> </ul> </li> </ol>"},{"location":"configs/services/","title":"Services","text":"<p>Services are configured inside the <code>services.yaml</code> file. You can have any number of groups, and any number of services per group.</p>"},{"location":"configs/services/#groups","title":"Groups","text":"<p>Groups are defined as top-level array entries.</p> <pre><code>- Group A:\n    - Service A:\n        href: http://localhost/\n\n- Group B:\n    - Service B:\n        href: http://localhost/\n</code></pre> <p></p>"},{"location":"configs/services/#nested-groups","title":"Nested Groups","text":"<p>Groups can be nested by using the same format as the top-level groups.</p> <pre><code>- Group A:\n    - Service A:\n        href: http://localhost/\n\n    - Group B:\n        - Service B:\n            href: http://localhost/\n\n        - Service C:\n            href: http://localhost/\n</code></pre>"},{"location":"configs/services/#services","title":"Services","text":"<p>Services are defined as array entries on groups,</p> <pre><code>- Group A:\n    - Service A:\n        href: http://localhost/\n\n    - Service B:\n        href: http://localhost/\n\n    - Service C:\n        href: http://localhost/\n\n- Group B:\n    - Service D:\n        href: http://localhost/\n</code></pre> <p></p>"},{"location":"configs/services/#service-widgets","title":"Service Widgets","text":"<p>Each service can have widgets attached to it (often matching the service type, but that's not forced).</p> <p>In addition to the href of the service, you can also specify the target location in which to open that link. See Link Target for more details.</p> <p>Using Emby as an example, this is how you would attach the Emby service widget.</p> <pre><code>- Emby:\n    icon: emby.png\n    href: http://emby.host.or.ip/\n    description: Movies &amp; TV Shows\n    widget:\n      type: emby\n      url: http://emby.host.or.ip\n      key: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"configs/services/#multiple-widgets","title":"Multiple Widgets","text":"<p>Each service can have multiple widgets attached to it, for example:</p> <pre><code>- Emby:\n    icon: emby.png\n    href: http://emby.host.or.ip/\n    description: Movies &amp; TV Shows\n    widgets:\n      - type: emby\n        url: http://emby.host.or.ip\n        key: apikeyapikeyapikeyapikeyapikey\n      - type: uptimekuma\n        url: http://uptimekuma.host.or.ip:port\n        slug: statuspageslug\n</code></pre> <p>Note</p> <p>Multiple widgets per service are not yet supported with Kubernetes ingress annotations.</p>"},{"location":"configs/services/#field-visibility","title":"Field Visibility","text":"<p>Each widget can optionally provide a list of which fields should be visible via the <code>fields</code> widget property. If no fields are specified, then all fields will be displayed. The <code>fields</code> property must be a valid YAML array of strings. As an example, here is the entry for Sonarr showing only a couple of fields.</p> <p>In all cases a widget will work and display all fields without specifying the <code>fields</code> property.</p> <pre><code>- Sonarr:\n    icon: sonarr.png\n    href: http://sonarr.host.or.ip\n    widget:\n      type: sonarr\n      fields: [\"wanted\", \"queued\"]\n      url: http://sonarr.host.or.ip\n      key: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"configs/services/#descriptions","title":"Descriptions","text":"<p>Services may have descriptions,</p> <pre><code>- Group A:\n    - Service A:\n        href: http://localhost/\n        description: This is my service\n\n- Group B:\n    - Service B:\n        href: http://localhost/\n        description: This is another service\n</code></pre> <p></p>"},{"location":"configs/services/#icons","title":"Icons","text":"<p>Services may have an icon attached to them, you can use icons from Dashboard Icons automatically, by passing the name of the icon, with, or without <code>.png</code>, <code>.webp</code> or <code>.svg</code> to specify the desired version.</p> <p>You can also specify prefixed icons from:</p> <ul> <li>Material Design Icons with <code>mdi-XX</code></li> <li>Simple Icons with <code>si-XX</code></li> <li>selfh.st/icons with <code>sh-XX</code> to use the png version or <code>sh-XX.svg/png/webp</code> for a specific version</li> </ul> <p>You can specify a custom color for <code>mdi</code> and <code>si</code> icons by adding a hex color code as a suffix e.g. <code>mdi-XX-#f0d453</code> or <code>si-XX-#a712a2</code>.</p> <p>To use a remote icon, use the absolute URL (e.g. <code>https://...</code>).</p> <p>To use a local icon, first create a Docker mount to <code>/app/public/icons</code> and then reference your icon as <code>/icons/myicon.png</code>. You will need to restart the container when adding new icons.</p> <p>Warning</p> <p>Material Design Icons for brands were deprecated and may be removed in the future. Using Simple Icons for brand icons will prevent any issues if / when the Material Design Icons are removed.</p> <pre><code>- Group A:\n    - Sonarr:\n        icon: sonarr.png\n        href: http://sonarr.host/\n        description: Series management\n\n- Group B:\n    - Radarr:\n        icon: radarr.png\n        href: http://radarr.host/\n        description: Movie management\n\n- Group C:\n    - Service:\n        icon: mdi-flask-outline\n        href: http://service.host/\n        description: My cool service\n</code></pre> <p></p>"},{"location":"configs/services/#ping","title":"Ping","text":"<p>Services may have an optional <code>ping</code> property that allows you to monitor the availability of an external host. As of v0.8.0, the ping feature attempts to use a true (ICMP) ping command on the underlying host. Currently, only IPv4 is supported.</p> <p>Note</p> <p>Because ping uses the ping command on the underlying host, in some cases you may need to install e.g. the <code>iputils-ping</code> package on the host system.</p> <pre><code>- Group A:\n    - Sonarr:\n        icon: sonarr.png\n        href: http://sonarr.host/\n        ping: sonarr.host\n\n- Group B:\n    - Radarr:\n        icon: radarr.png\n        href: http://radarr.host/\n        ping: some.other.host\n</code></pre> <p></p> <p>You can also apply different styles to the ping indicator by using the <code>statusStyle</code> property, see settings.</p>"},{"location":"configs/services/#site-monitor","title":"Site Monitor","text":"<p>Services may have an optional <code>siteMonitor</code> property (formerly <code>ping</code>) that allows you to monitor the availability of a URL you chose and have the response time displayed. You do not need to set your monitor URL equal to your href or ping URL.</p> <p>Note</p> <p>The site monitor feature works by making an http <code>HEAD</code> request to the URL, and falls back to <code>GET</code> in case that fails. It will not, for example, login if the URL requires auth or is behind e.g. Authelia. In the case of a reverse proxy and/or auth this usually requires the use of an 'internal' URL to make the site monitor feature correctly display status.</p> <pre><code>- Group A:\n    - Sonarr:\n        icon: sonarr.png\n        href: http://sonarr.host/\n        siteMonitor: http://sonarr.host/\n\n- Group B:\n    - Radarr:\n        icon: radarr.png\n        href: http://radarr.host/\n        siteMonitor: http://some.other.host/\n</code></pre> <p>You can also apply different styles to the site monitor indicator by using the <code>statusStyle</code> property, see settings.</p>"},{"location":"configs/services/#docker-integration","title":"Docker Integration","text":"<p>Services may be connected to a Docker container, either running on the local machine, or a remote machine.</p> <pre><code>- Group A:\n    - Service A:\n        href: http://localhost/\n        description: This is my service\n        server: my-server\n        container: my-container\n\n- Group B:\n    - Service B:\n        href: http://localhost/\n        description: This is another service\n        server: other-server\n        container: other-container\n</code></pre> <p></p> <p>Clicking on the status label of a service with Docker integration enabled will expand the container stats, where you can see CPU, Memory, and Network activity.</p> <p>Note</p> <p>This can also be controlled with <code>showStats</code>. See show docker stats for more information</p> <p></p>"},{"location":"configs/services/#service-integrations","title":"Service Integrations","text":"<p>Services may also have a service widget (or integration) attached to them, this works independently of the Docker integration.</p> <p>You can find information and configuration for each of the supported integrations on the Widgets page.</p> <p>Here is an example of a Radarr &amp; Sonarr service, with their respective integrations.</p> <pre><code>- Group A:\n    - Sonarr:\n        icon: sonarr.png\n        href: http://sonarr.host/\n        description: Series management\n        widget:\n          type: sonarr\n          url: http://sonarr.host\n          key: apikeyapikeyapikeyapikeyapikey\n\n- Group B:\n    - Radarr:\n        icon: radarr.png\n        href: http://radarr.host/\n        description: Movie management\n        widget:\n          type: radarr\n          url: http://radarr.host\n          key: apikeyapikeyapikeyapikeyapikey\n</code></pre> <p></p>"},{"location":"configs/settings/","title":"Settings","text":"<p>The <code>settings.yaml</code> file allows you to define application level options. For changes made to this file to take effect, you will need to regenerate the static HTML, this can be done by clicking the refresh icon in the bottom right of the page.</p>"},{"location":"configs/settings/#title","title":"Title","text":"<p>You can customize the title of the page if you'd like.</p> <pre><code>title: My Awesome Homepage\n</code></pre>"},{"location":"configs/settings/#description","title":"Description","text":"<p>You can customize the description of the page if you'd like.</p> <pre><code>description: A description of my awesome homepage\n</code></pre>"},{"location":"configs/settings/#start-url","title":"Start URL","text":"<p>You can customize the start_url as required for installable apps. The default is \"/\".</p> <pre><code>startUrl: https://custom.url\n</code></pre>"},{"location":"configs/settings/#background-image","title":"Background Image","text":"<p>Heads Up!</p> <p>You will need to restart the container any time you add new images, this is a limitation of the Next.js static site server.</p> <p>Heads Up!</p> <p>Do not create a bind mount to the entire <code>/app/public/</code> directory.</p> <p>If you'd like to use a background image instead of the solid theme color, you may provide a full URL to an image of your choice.</p> <pre><code>background: https://images.unsplash.com/photo-1502790671504-542ad42d5189?auto=format&amp;fit=crop&amp;w=2560&amp;q=80\n</code></pre> <p>Or you may pass the path to a local image relative to e.g. <code>/app/public/images</code> directory.</p> <p>For example, inside of your Docker Compose file, mount a path to where your images are kept:</p> <pre><code>volumes:\n  - /my/homepage/images:/app/public/images\n</code></pre> <p>and then reference that image:</p> <pre><code>background: /images/background.png\n</code></pre>"},{"location":"configs/settings/#background-opacity-filters","title":"Background Opacity &amp; Filters","text":"<p>You can specify filters to apply over your background image for blur, saturation and brightness as well as opacity to blend with the background color. The first three filter settings use tailwind CSS classes, see notes below regarding the options for each. You do not need to specify all options.</p> <pre><code>background:\n  image: /images/background.png\n  blur: sm # sm, \"\", md, xl... see https://tailwindcss.com/docs/backdrop-blur\n  saturate: 50 # 0, 50, 100... see https://tailwindcss.com/docs/backdrop-saturate\n  brightness: 50 # 0, 50, 75... see https://tailwindcss.com/docs/backdrop-brightness\n  opacity: 50 # 0-100\n</code></pre>"},{"location":"configs/settings/#card-background-blur","title":"Card Background Blur","text":"<p>You can apply a blur filter to the service &amp; bookmark cards. Note this option is incompatible with the background blur, saturate and brightness filters.</p> <pre><code>cardBlur: xs # xs, md, etc... see https://tailwindcss.com/docs/backdrop-blur\n</code></pre>"},{"location":"configs/settings/#favicon","title":"Favicon","text":"<p>If you'd like to use a custom favicon instead of the included one, you may provide a full URL to an image of your choice.</p> <pre><code>favicon: https://www.google.com/favicon.ico\n</code></pre> <p>Or you may pass the path to a local image relative to the <code>/app/public</code> directory. See Background Image for more detailed information on how to provide your own files.</p>"},{"location":"configs/settings/#theme","title":"Theme","text":"<p>You can configure a fixed theme (and disable the theme switcher) by passing the <code>theme</code> option, like so:</p> <pre><code>theme: dark # or light\n</code></pre>"},{"location":"configs/settings/#color-palette","title":"Color Palette","text":"<p>You can configure a fixed color palette (and disable the palette switcher) by passing the <code>color</code> option, like so:</p> <pre><code>color: slate\n</code></pre> <p>Supported colors are: <code>slate</code>, <code>gray</code>, <code>zinc</code>, <code>neutral</code>, <code>stone</code>, <code>amber</code>, <code>yellow</code>, <code>lime</code>, <code>green</code>, <code>emerald</code>, <code>teal</code>, <code>cyan</code>, <code>sky</code>, <code>blue</code>, <code>indigo</code>, <code>violet</code>, <code>purple</code>, <code>fuchsia</code>, <code>pink</code>, <code>rose</code>, <code>red</code>, <code>white</code></p>"},{"location":"configs/settings/#layout","title":"Layout","text":"<p>You can configure service and bookmarks sections to be either \"column\" or \"row\" based layouts, like so:</p> <p>Assuming you have a group named <code>Media</code> in your <code>services.yaml</code> or <code>bookmarks.yaml</code> file,</p> <pre><code>layout:\n  Media:\n    style: row\n    columns: 4\n</code></pre> <p>As an example, this would produce the following layout:</p> <p></p>"},{"location":"configs/settings/#icons-only-layout","title":"Icons-Only Layout","text":"<p>You can also specify the an icon-only layout for bookmarks, either like so:</p> <pre><code>layout:\n  Media:\n    iconsOnly: true\n</code></pre> <p>or globally:</p> <pre><code>bookmarksStyle: icons\n</code></pre>"},{"location":"configs/settings/#sorting","title":"Sorting","text":"<p>Service groups and bookmark groups can be mixed in order, but should use different group names. If you do not specify any bookmark groups they will all show at the bottom of the page.</p> <p>Using the same name for a service and bookmark group can cause unexpected behavior like a bookmark group being hidden</p> <p>Groups will sort based on the order in the layout block. You can also mix in groups defined by docker labels, e.g.</p> <pre><code>layout:\n  - Auto-Discovered1:\n  - Configured1:\n  - Configured2:\n  - Auto-Discovered2:\n  - Configured3:\n      style: row\n      columns: 3\n</code></pre>"},{"location":"configs/settings/#nested-groups","title":"Nested Groups","text":"<p>If your services config has nested groups, you can apply settings to these groups by nesting them in the layout block and using the same settings. For example</p> <pre><code>layout:\n  Group A:\n    style: row\n    columns: 4\n  Group C:\n    style: row\n    columns: 2\n    Nested Group A:\n      style: row\n      columns: 2\n    Nested Group B:\n      style: row\n      columns: 2\n</code></pre>"},{"location":"configs/settings/#headers","title":"Headers","text":"<p>You can hide headers for each section in the layout as well by passing <code>header</code> as false, like so:</p> <pre><code>layout:\n  Section A:\n    header: false\n  Section B:\n    style: row\n    columns: 3\n    header: false\n</code></pre>"},{"location":"configs/settings/#category-icons","title":"Category Icons","text":"<p>You can also add an icon to a category under the <code>layout</code> setting similar to the options for service icons, e.g.</p> <pre><code>  Home Management &amp; Info:\n    icon: home-assistant.png\n  Server Tools:\n    icon: https://cdn-icons-png.flaticon.com/512/252/252035.png\n  ...\n</code></pre>"},{"location":"configs/settings/#icon-style","title":"Icon Style","text":"<p>The default style for icons (e.g. <code>icon: mdi-XXXX</code>) is a gradient, or you can specify that prefixed icons match your theme with a 'flat' style using the setting below. More information about prefixed icons can be found in options for service icons.</p> <pre><code>iconStyle: theme # optional, defaults to gradient\n</code></pre>"},{"location":"configs/settings/#tabs","title":"Tabs","text":"<p>Version 0.6.30 introduced a tabbed view to layouts which can be optionally specified in the layout. Tabs is only active if you set the <code>tab</code> field on at least one layout group.</p> <p>Tabs are sorted based on the order in the layout block. If a group has no tab specified (and tabs are set on other groups), services and bookmarks will be shown on all tabs.</p> <p>Every tab can be accessed directly by visiting Homepage URL with <code>#Group</code> (name lowercase and URI-encoded) at the end of the URL.</p> <p>For example, the following would create four tabs:</p> <pre><code>layout:\n  ...\n  Bookmark Group on First Tab:\n    tab: First\n\n  First Service Group:\n    tab: First\n    style: row\n    columns: 4\n\n  Second Service Group:\n    tab: Second\n    columns: 4\n\n  Third Service Group:\n    tab: Third\n    style: row\n\n  Bookmark Group on Fourth Tab:\n    tab: Fourth\n\n  Service Group on every Tab:\n    style: row\n    columns: 4\n</code></pre>"},{"location":"configs/settings/#full-width","title":"Full Width","text":"<p>You can make homepage take up the entire window width by adding:</p> <pre><code>fullWidth: true\n</code></pre>"},{"location":"configs/settings/#maximum-group-columns","title":"Maximum Group Columns","text":"<p>You can set the maximum number of columns of groups on larger screen sizes (note this is only for groups with the default <code>style: columns</code>, not groups with <code>style: row</code>) by adding:</p> <pre><code>maxGroupColumns: 8 # default is 4 for services, 6 for bookmarks, max 8\n</code></pre> <p>By default homepage will max out at 4 columns for services and 6 for bookmarks, thus the minimum for this setting is 5. Of course, if you're setting this to higher numbers, you may want to consider enabling the fullWidth option as well.</p> <p>If you want to set the maximum columns for bookmark groups separately, you can do so by adding:</p> <pre><code>maxBookmarkGroupColumns: 6 # default is 6, max 8\n</code></pre>"},{"location":"configs/settings/#collapsible-sections","title":"Collapsible sections","text":"<p>You can disable the collapsible feature of services &amp; bookmarks by adding:</p> <pre><code>disableCollapse: true\n</code></pre> <p>By default the feature is enabled.</p>"},{"location":"configs/settings/#initially-collapsed-sections","title":"Initially collapsed sections","text":"<p>You can initially collapse sections by adding the <code>initiallyCollapsed</code> option to the layout group.</p> <pre><code>layout:\n  Section A:\n    initiallyCollapsed: true\n</code></pre> <p>This can also be set globaly using the <code>groupsInitiallyCollapsed</code> option.</p> <pre><code>groupsInitiallyCollapsed: true\n</code></pre> <p>The value set on a group will overwrite the global setting.</p> <p>By default the feature is disabled.</p>"},{"location":"configs/settings/#use-equal-height-cards","title":"Use Equal Height Cards","text":"<p>You can enable equal height cards for groups of services, this will make all cards in a row the same height.</p> <p>Global setting in <code>settings.yaml</code>:</p> <pre><code>useEqualHeights: true\n</code></pre> <p>Per layout group in <code>settings.yaml</code>:</p> <pre><code>useEqualHeights: false\nlayout:\n  ...\n  Group Name:\n    useEqualHeights: true # overrides global setting\n</code></pre> <p>By default the feature is disabled</p>"},{"location":"configs/settings/#header-style","title":"Header Style","text":"<p>There are currently 4 options for header styles, you can see each one below.</p> <p></p> <pre><code>headerStyle: underlined # default style\n</code></pre> <p></p> <pre><code>headerStyle: boxed\n</code></pre> <p></p> <pre><code>headerStyle: clean\n</code></pre> <p></p> <pre><code>headerStyle: boxedWidgets\n</code></pre>"},{"location":"configs/settings/#base-url","title":"Base URL","text":"<p>In some proxy configurations, it may be necessary to set the documents base URL. You can do this by providing a <code>base</code> value, like so:</p> <pre><code>base: http://host.local/homepage\n</code></pre> <p>The URL must be a full, absolute URL, or it will be ignored by the browser.</p>"},{"location":"configs/settings/#language","title":"Language","text":"<p>Set your desired language using:</p> <pre><code>language: fr\n</code></pre> <p>Currently supported languages: ca, de, en, es, fr, he, hr, hu, it, nb-NO, nl, pt, ru, sv, vi, zh-CN, zh-Hant</p> <p>You can also specify locales e.g. for the DateTime widget, e.g. en-AU, en-GB, etc.</p>"},{"location":"configs/settings/#link-target","title":"Link Target","text":"<p>Changes the behaviour of links on the homepage,</p> <pre><code>target: _blank # Possible options include _blank, _self, and _top\n</code></pre> <p>Use <code>_blank</code> to open links in a new tab, <code>_self</code> to open links in the same tab, and <code>_top</code> to open links in a new window.</p> <p>This can also be set for individual services. Note setting this at the service level overrides any setting in settings.json, e.g.:</p> <pre><code>- Example Service:\n    href: https://example.com/\n    ...\n    target: _self\n</code></pre>"},{"location":"configs/settings/#providers","title":"Providers","text":"<p>The <code>providers</code> section allows you to define shared API provider options and secrets.</p> <pre><code>providers:\n  openweathermap: openweathermapapikey\n  finnhub: yourfinnhubapikeyhere\n  longhorn:\n    url: https://longhorn.example.com\n    username: admin\n    password: LonghornPassword\n</code></pre> <p>You can then pass <code>provider</code> instead of <code>apiKey</code> in your widget configuration.</p> <pre><code>- openweathermap:\n    latitude: 50.449684\n    longitude: 30.525026\n    provider: openweathermap\n</code></pre>"},{"location":"configs/settings/#quick-launch","title":"Quick Launch","text":"<p>You can use the 'Quick Launch' feature to search services, perform a web search or open a URL. To use Quick Launch, just start typing while on your homepage (as long as the search widget doesn't have focus).</p> <p></p> <p>There are a few optional settings for the Quick Launch feature:</p> <ul> <li><code>searchDescriptions</code>: which lets you control whether item descriptions are included in searches. This is false by default. When enabled, results that match the item name will be placed above those that only match the description.</li> <li><code>hideInternetSearch</code>: disable automatically including the currently-selected web search (e.g. from the widget) as a Quick Launch option. This is false by default, enabling the feature.</li> <li><code>showSearchSuggestions</code>: show search suggestions for the internet search. If this is not specified then the setting will be inherited from the search widget. If it is not specified there either, it will default to false. For custom providers the <code>suggestionUrl</code> needs to be set in order for this to work.</li> <li><code>provider</code>: search engine provider. If none is specified it will try to use the provider set for the Search Widget, if neither are present then internet search will be disabled.</li> <li><code>hideVisitURL</code>: disable detecting and offering an option to open URLs. This is false by default, enabling the feature.</li> <li><code>mobileButtonPosition</code>: enables and sets the position of the mobile quicklaunch button. Options are <code>top-left</code>, <code>top-right</code>, <code>bottom-left</code>, <code>bottom-right</code>. This is empty by default, disabling the feature.</li> </ul> <pre><code>quicklaunch:\n  searchDescriptions: true\n  hideInternetSearch: true\n  showSearchSuggestions: true\n  hideVisitURL: true\n  provider: google # google, duckduckgo, bing, baidu, brave or custom\n</code></pre> <p>or for a custom search:</p> <pre><code>quicklaunch:\n  provider: custom\n  url: https://www.ecosia.org/search?q=\n  target: _blank\n  suggestionUrl: https://ac.ecosia.org/autocomplete?type=list&amp;q=\n</code></pre>"},{"location":"configs/settings/#homepage-version-update-checking","title":"Homepage Version &amp; Update Checking","text":"<p>By default the release version is displayed at the bottom of the page. To hide this, use the <code>hideVersion</code> setting, like so:</p> <pre><code>hideVersion: true\n</code></pre> <p>You can disable checking for new versions from GitHub (enabled by default) with:</p> <pre><code>disableUpdateCheck: true\n</code></pre>"},{"location":"configs/settings/#log-path","title":"Log Path","text":"<p>By default the homepage logfile is written to the a <code>logs</code> subdirectory of the <code>config</code> folder. In order to customize this path, you can set the <code>logpath</code> setting. A <code>logs</code> folder will be created in that location where the logfile will be written.</p> <pre><code>logpath: /logfile/path\n</code></pre> <p>By default, logs are sent both to <code>stdout</code> and to a file at the path specified. This can be changed by setting the <code>LOG_TARGETS</code> environment variable to one of <code>both</code> (default), <code>stdout</code> or <code>file</code>.</p>"},{"location":"configs/settings/#show-container-stats","title":"Show Container Stats","text":"<p>You can show all docker or proxmox stats expanded in <code>settings.yaml</code>:</p> <pre><code>showStats: true\n</code></pre> <p>or per-service (<code>services.yaml</code>) with:</p> <pre><code>- Example Service:\n    ...\n    showStats: true\n</code></pre> <p>If you have both set the per-service settings take precedence.</p>"},{"location":"configs/settings/#status-style","title":"Status Style","text":"<p>You can choose from the following styles for docker or k8s status, site monitor and ping: <code>dot</code> or <code>basic</code></p> <ul> <li>The default is no value, and displays the monitor and ping response time in ms and the docker / k8s container status</li> <li><code>dot</code> shows a green dot for a successful monitor ping or healthy status.</li> <li><code>basic</code> shows either UP or DOWN for monitor &amp; ping</li> </ul> <p>For example:</p> <pre><code>statusStyle: \"dot\"\n</code></pre> <p>or per-service (<code>services.yaml</code>) with:</p> <pre><code>- Example Service:\n    ...\n    statusStyle: 'dot'\n</code></pre> <p>If you have both set, the per-service settings take precedence.</p>"},{"location":"configs/settings/#instance-name","title":"Instance Name","text":"<p>Name used by automatic docker service discovery to differentiate between multiple homepage instances.</p> <p>For example:</p> <pre><code>instanceName: public\n</code></pre>"},{"location":"configs/settings/#hide-widget-error-messages","title":"Hide Widget Error Messages","text":"<p>Hide the visible API error messages either globally in <code>settings.yaml</code>:</p> <pre><code>hideErrors: true\n</code></pre> <p>or per service widget (<code>services.yaml</code>) with:</p> <pre><code>- Example Service:\n    ...\n    widget:\n    ...\n        hideErrors: true\n</code></pre> <p>If either value is set to true, the error message will be hidden.</p>"},{"location":"installation/","title":"Installation","text":"<p>You have a few options for deploying homepage, depending on your needs. We offer docker images for a majority of platforms. You can also install and run homepage from source if Docker is not your thing. It can even be installed on Kubernetes with Helm.</p> <p>Info</p> <p>Please note that when using features such as widgets, Homepage can access personal information (for example from your home automation system) and Homepage currently does not (and is not planned to) include any authentication layer itself. Thus, we recommend homepage be deployed behind a reverse proxy including authentication, SSL etc, and / or behind a VPN.</p> <p></p> <p> \u00a0 Install on Docker </p> <p> \u00a0 Install on Kubernetes </p> <p> \u00a0 Install on UNRAID </p> <p> \u00a0 Building from source </p>"},{"location":"installation/#homepage_allowed_hosts","title":"<code>HOMEPAGE_ALLOWED_HOSTS</code>","text":"<p>As of v1.0 there is one required environment variable to access homepage via a URL other than <code>localhost</code>, <code>HOMEPAGE_ALLOWED_HOSTS</code>. The setting helps prevent certain kinds of attacks when retrieving data from the homepage API proxy.</p> <p>The value is a comma-separated (no spaces) list of allowed hosts (sometimes with the port) that can host your homepage install. See the docker, kubernetes and source installation pages for more information about where / how to set the variable.</p> <p><code>localhost:3000</code> and <code>127.0.0.1:3000</code> are always included, but you can add a domain or IP address to this list to allow that host such as <code>HOMEPAGE_ALLOWED_HOSTS=gethomepage.dev,192.168.1.2:1234</code>, etc.</p> <p>If you are seeing errors about host validation, check the homepage logs and ensure that the host exactly as output in the logs is in the <code>HOMEPAGE_ALLOWED_HOSTS</code> list.</p> <p>This can be disabled by setting <code>HOMEPAGE_ALLOWED_HOSTS</code> to <code>*</code> but this is not recommended.</p>"},{"location":"installation/docker/","title":"Docker Installation","text":"<p>Using docker compose:</p> <pre><code>services:\n  homepage:\n    image: ghcr.io/gethomepage/homepage:latest\n    container_name: homepage\n    ports:\n      - 3000:3000\n    volumes:\n      - /path/to/config:/app/config # Make sure your local config directory exists\n      - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations\n    environment:\n      HOMEPAGE_ALLOWED_HOSTS: gethomepage.dev # required, may need port. See gethomepage.dev/installation/#homepage_allowed_hosts\n</code></pre>"},{"location":"installation/docker/#running-as-non-root","title":"Running as non-root","text":"<p>By default, the Homepage container runs as root. Homepage also supports running your container as non-root via the standard <code>PUID</code> and <code>PGID</code> environment variables. When using these variables, make sure that any volumes mounted in to the container have the correct ownership and permissions set.</p> <p>Using the docker socket directly is not the recommended method of integration and requires either running homepage as root or that the user be part of the docker group</p> <p>In the docker compose example below, the environment variables <code>$PUID</code> and <code>$PGID</code> are set in a <code>.env</code> file.</p> <pre><code>services:\n  homepage:\n    image: ghcr.io/gethomepage/homepage:latest\n    container_name: homepage\n    ports:\n      - 3000:3000\n    volumes:\n      - /path/to/config:/app/config # Make sure your local config directory exists\n      - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations, see alternative methods\n    environment:\n      HOMEPAGE_ALLOWED_HOSTS: gethomepage.dev # required, may need port. See gethomepage.dev/installation/#homepage_allowed_hosts\n      PUID: $PUID\n      PGID: $PGID\n</code></pre>"},{"location":"installation/docker/#with-docker-run","title":"With Docker Run","text":"<pre><code>docker run -p 3000:3000 -e HOMEPAGE_ALLOWED_HOSTS=gethomepage.dev -v /path/to/config:/app/config -v /var/run/docker.sock:/var/run/docker.sock ghcr.io/gethomepage/homepage:latest\n</code></pre>"},{"location":"installation/docker/#using-environment-secrets","title":"Using Environment Secrets","text":"<p>You can also include environment variables in your config files to protect sensitive information. Note:</p> <ul> <li>Environment variables must start with <code>HOMEPAGE_VAR_</code> or <code>HOMEPAGE_FILE_</code></li> <li>The value of env var <code>HOMEPAGE_VAR_XXX</code> will replace <code>{{HOMEPAGE_VAR_XXX}}</code> in any config</li> <li>The value of env var <code>HOMEPAGE_FILE_XXX</code> must be a file path, the contents of which will be used to replace <code>{{HOMEPAGE_FILE_XXX}}</code> in any config</li> </ul>"},{"location":"installation/k8s/","title":"Kubernetes Installation","text":""},{"location":"installation/k8s/#install-with-kubernetes-manifests","title":"Install with Kubernetes Manifests","text":"<p>If you don't want to use the unofficial Helm chart, you can also create your own Kubernetes manifest(s) and apply them with <code>kubectl apply -f filename.yaml</code>.</p> <p>Here's a working example of the resources you need:</p>"},{"location":"installation/k8s/#serviceaccount","title":"ServiceAccount","text":"<pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: homepage\n  namespace: default\n  labels:\n    app.kubernetes.io/name: homepage\nsecrets:\n  - name: homepage\n</code></pre>"},{"location":"installation/k8s/#secret","title":"Secret","text":"<pre><code>apiVersion: v1\nkind: Secret\ntype: kubernetes.io/service-account-token\nmetadata:\n  name: homepage\n  namespace: default\n  labels:\n    app.kubernetes.io/name: homepage\n  annotations:\n    kubernetes.io/service-account.name: homepage\n</code></pre>"},{"location":"installation/k8s/#configmap","title":"ConfigMap","text":"<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: homepage\n  namespace: default\n  labels:\n    app.kubernetes.io/name: homepage\ndata:\n  kubernetes.yaml: |\n    mode: cluster\n  settings.yaml: \"\"\n  #settings.yaml: |\n  #  providers:\n  #    longhorn:\n  #      url: https://longhorn.my.network\n  custom.css: \"\"\n  custom.js: \"\"\n  bookmarks.yaml: |\n    - Developer:\n        - Github:\n            - abbr: GH\n              href: https://github.com/\n  services.yaml: |\n    - My First Group:\n        - My First Service:\n            href: http://localhost/\n            description: Homepage is awesome\n\n    - My Second Group:\n        - My Second Service:\n            href: http://localhost/\n            description: Homepage is the best\n\n    - My Third Group:\n        - My Third Service:\n            href: http://localhost/\n            description: Homepage is \ud83d\ude0e\n  widgets.yaml: |\n    - kubernetes:\n        cluster:\n          show: true\n          cpu: true\n          memory: true\n          showLabel: true\n          label: \"cluster\"\n        nodes:\n          show: true\n          cpu: true\n          memory: true\n          showLabel: true\n    - resources:\n        backend: resources\n        expanded: true\n        cpu: true\n        memory: true\n        network: default\n    - search:\n        provider: duckduckgo\n        target: _blank\n  docker.yaml: \"\"\n</code></pre>"},{"location":"installation/k8s/#clusterrole-and-clusterrolebinding","title":"ClusterRole and ClusterRoleBinding","text":"<pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: homepage\n  labels:\n    app.kubernetes.io/name: homepage\nrules:\n  - apiGroups:\n      - \"\"\n    resources:\n      - namespaces\n      - pods\n      - nodes\n    verbs:\n      - get\n      - list\n  - apiGroups:\n      - extensions\n      - networking.k8s.io\n    resources:\n      - ingresses\n    verbs:\n      - get\n      - list\n  - apiGroups:\n      - traefik.io\n    resources:\n      - ingressroutes\n    verbs:\n      - get\n      - list\n  - apiGroups:\n      - gateway.networking.k8s.io\n    resources:\n      - httproutes\n      - gateways\n    verbs:\n      - get\n      - list\n  - apiGroups:\n      - metrics.k8s.io\n    resources:\n      - nodes\n      - pods\n    verbs:\n      - get\n      - list\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: homepage\n  labels:\n    app.kubernetes.io/name: homepage\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: homepage\nsubjects:\n  - kind: ServiceAccount\n    name: homepage\n    namespace: default\n</code></pre>"},{"location":"installation/k8s/#service","title":"Service","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: homepage\n  namespace: default\n  labels:\n    app.kubernetes.io/name: homepage\n  annotations:\nspec:\n  type: ClusterIP\n  ports:\n    - port: 3000\n      targetPort: http\n      protocol: TCP\n      name: http\n  selector:\n    app.kubernetes.io/name: homepage\n</code></pre>"},{"location":"installation/k8s/#deployment","title":"Deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: homepage\n  namespace: default\n  labels:\n    app.kubernetes.io/name: homepage\nspec:\n  revisionHistoryLimit: 3\n  replicas: 1\n  strategy:\n    type: RollingUpdate\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: homepage\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: homepage\n    spec:\n      serviceAccountName: homepage\n      automountServiceAccountToken: true\n      dnsPolicy: ClusterFirst\n      enableServiceLinks: true\n      containers:\n        - name: homepage\n          image: \"ghcr.io/gethomepage/homepage:latest\"\n          imagePullPolicy: Always\n          env:\n            - name: HOMEPAGE_ALLOWED_HOSTS\n              value: gethomepage.dev # required, may need port. See gethomepage.dev/installation/#homepage_allowed_hosts\n          ports:\n            - name: http\n              containerPort: 3000\n              protocol: TCP\n          volumeMounts:\n            - mountPath: /app/config/custom.js\n              name: homepage-config\n              subPath: custom.js\n            - mountPath: /app/config/custom.css\n              name: homepage-config\n              subPath: custom.css\n            - mountPath: /app/config/bookmarks.yaml\n              name: homepage-config\n              subPath: bookmarks.yaml\n            - mountPath: /app/config/docker.yaml\n              name: homepage-config\n              subPath: docker.yaml\n            - mountPath: /app/config/kubernetes.yaml\n              name: homepage-config\n              subPath: kubernetes.yaml\n            - mountPath: /app/config/services.yaml\n              name: homepage-config\n              subPath: services.yaml\n            - mountPath: /app/config/settings.yaml\n              name: homepage-config\n              subPath: settings.yaml\n            - mountPath: /app/config/widgets.yaml\n              name: homepage-config\n              subPath: widgets.yaml\n            - mountPath: /app/config/logs\n              name: logs\n      volumes:\n        - name: homepage-config\n          configMap:\n            name: homepage\n        - name: logs\n          emptyDir: {}\n</code></pre>"},{"location":"installation/k8s/#ingress","title":"Ingress","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: homepage\n  namespace: default\n  labels:\n    app.kubernetes.io/name: homepage\n  annotations:\n    gethomepage.dev/description: Dynamically Detected Homepage\n    gethomepage.dev/enabled: \"true\"\n    gethomepage.dev/group: Cluster Management\n    gethomepage.dev/icon: homepage.png\n    gethomepage.dev/name: Homepage\nspec:\n  rules:\n    - host: \"homepage.my.network\"\n      http:\n        paths:\n          - path: \"/\"\n            pathType: Prefix\n            backend:\n              service:\n                name: homepage\n                port:\n                  number: 3000\n</code></pre>"},{"location":"installation/k8s/#multiple-replicas","title":"Multiple Replicas","text":"<p>If you plan to deploy homepage with a replica count greater than 1, you may want to consider enabling sticky sessions on the homepage route. This will prevent unnecessary re-renders on page loads and window / tab focusing. The procedure for enabling sticky sessions depends on your Ingress controller. Below is an example using Traefik as the Ingress controller.</p> <pre><code>apiVersion: traefik.io/v1alpha1\nkind: IngressRoute\nmetadata:\n  name: homepage.example.com\nspec:\n  entryPoints:\n    - websecure\n  routes:\n    - kind: Rule\n      match: Host(`homepage.example.com`)\n      services:\n        - kind: Service\n          name: homepage\n          port: 3000\n          sticky:\n            cookie:\n              httpOnly: true\n              secure: true\n              sameSite: none\n</code></pre>"},{"location":"installation/source/","title":"Source Installation","text":"<p>First, clone the repository:</p> <pre><code>git clone https://github.com/gethomepage/homepage.git\n</code></pre> <p>If <code>pnpm</code> is not installed, install it:</p> <pre><code>npm install -g pnpm\n</code></pre> <p>Then install dependencies and build the production bundle:</p> <pre><code>pnpm install\npnpm build\n</code></pre> <p>If this is your first time starting, copy the <code>src/skeleton</code> directory to <code>config/</code> to populate initial example config files.</p> <p>Finally, run the server:</p> <pre><code>HOMEPAGE_ALLOWED_HOSTS=gethomepage.dev:1234 pnpm start\n</code></pre> <p>When updating homepage versions you will need to re-build the static files i.e. repeat the process above.</p> <p>See HOMEPAGE_ALLOWED_HOSTS for more information on this environment variable.</p>"},{"location":"installation/unraid/","title":"UNRAID Installation","text":"<p>Homepage has an UNRAID community package that you may use to install homepage. This is the easiest way to get started with homepage on UNRAID.</p>"},{"location":"installation/unraid/#install-the-plugin","title":"Install the Plugin","text":"<ul> <li>In the UNRAID webGUI, go to the Apps tab.</li> <li>In the search bar, search for <code>homepage</code>.</li> <li>Click on Install.</li> <li>Change the parameters to your liking.</li> <li>Click on APPLY.</li> </ul>"},{"location":"installation/unraid/#run-the-container","title":"Run the Container","text":"<ul> <li>While the container is running, open the WebUI.</li> <li>Opening the page will generate the configuration files.</li> </ul> <p>You may need to set the permissions of the folders to be able to edit the files.</p> <ul> <li>Click on the Homepage icon.</li> <li>Click on Console.</li> <li>Enter <code>chmod -R u-x,go-rwx,go+u,ugo+X /app/config</code> and press Enter.</li> <li>Enter <code>chmod -R u-x,go-rwx,go+u,ugo+X /app/public/icons</code> and press Enter.</li> <li>Enter <code>chown -R nobody:users /app/config</code> and press Enter.</li> <li>Enter <code>chown -R nobody:users /app/public/icons</code> and press Enter.</li> </ul>"},{"location":"installation/unraid/#some-other-notes","title":"Some Other Notes","text":"<ul> <li>To use the Docker integration, you only need to use the <code>container:</code> parameter. There is no need to set the server.</li> </ul> <p>Note</p> <p>To view detailed container statistics (CPU, RAM, etc.), or if you use a remote docker socket, <code>container:</code> will still need to be set. For example:</p> <pre><code>    - Plex:\n        icon: /icons/plex.png\n        href: https://app.plex.com\n        container: plex\n</code></pre> <ul> <li>When you upload a new image into the /images folder, you will need to restart the container for it to show up in the WebUI. Please see the service icons for more information.</li> </ul>"},{"location":"more/","title":"More","text":"<p>Here you'll find resources and guides for Homepage, troubleshooting tips, and more.</p>"},{"location":"more/coverage/","title":"Community Coverage","text":"<p>Homepage has been covered by quite a few YouTube channels, here are some of them. If you have a video you'd like to add, please open a PR!</p>"},{"location":"more/coverage/#english","title":"English","text":""},{"location":"more/coverage/#french","title":"French","text":""},{"location":"more/coverage/#german","title":"German","text":""},{"location":"more/coverage/#chinese","title":"Chinese","text":""},{"location":"more/coverage/#russian","title":"Russian","text":""},{"location":"more/homepage-move/","title":"Homepage Move","text":"<p>As of v0.7.2 homepage migrated from benphelps/homepage to an \"organization\" repository located at gethomepage/homepage. The reason for this was to setup the project for longevity and allow for community maintenance.</p> <p>Migrating your installation should be as simple as changing <code>image: ghcr.io/benphelps/homepage:latest</code> to <code>image: ghcr.io/gethomepage/homepage:latest</code>.</p>"},{"location":"more/sponsors/","title":"Sponsors","text":"<p>If you would like to support the Homepage project, you can do so by becoming a sponsor. Your sponsorship helps to keep the project running and growing.</p> <p> GitHub Sponsors</p> <p> OpenCollective</p> <p> Patreon</p> <p>These companies help the Homepage project by providing services, tools, and resources.</p> <p>       DigitalOcean provides the GitHub Actions runner for the project.  Dramatically speeding up the CI/CD process.     </p> <p>       Crowdin provides the translation platform for the project.  Making it easy to translate the project into multiple languages.     </p> <p>       JetBrains provides the project with free licenses for their awesome tools.     </p> <p>       BuySellAds provides the project with the ability to monetize the website, with high quality ads from the CarbonAds network.  All earnings are sent directly to the projects OpenCollective.     </p>"},{"location":"more/translations/","title":"Translations","text":"<p>Homepage is developed in English, component contributions must be in English. All translations are community provided, so a huge thanks go out to all those who have helped out so far!</p>"},{"location":"more/translations/#support-translations","title":"Support Translations","text":"<p>If you'd like to lend a hand in translating Homepage into more languages, or to improve existing translations, the process is very simple:</p> <ol> <li>Create a free account at Crowdin</li> <li>Visit the Homepage project</li> <li>Select the language you'd like to translate</li> <li>Start translating!</li> </ol>"},{"location":"more/translations/#adding-a-new-language","title":"Adding a new language","text":"<p>If you'd like to add a new language, please create a new Discussion on Crowdin, and we'll add it to the project.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#general-troubleshooting-tips","title":"General Troubleshooting Tips","text":"<ul> <li>For API errors, clicking the \"API Error Information\" button in the widget will usually show some helpful information as to whether the issue is reaching the service host, an authentication issue, etc.</li> <li>Check config/logs/homepage.log, on docker simply e.g. <code>docker logs homepage</code>. This may provide some insight into the reason for an error.</li> <li>Check the browser error console, this can also sometimes provide useful information.</li> <li>Consider setting the <code>ENV</code> variable <code>LOG_LEVEL</code> to <code>debug</code>.</li> <li>If certain widgets are failing when connecting to public APIs, consider disabling IPv6.</li> </ul>"},{"location":"troubleshooting/#service-widget-errors","title":"Service Widget Errors","text":"<p>All service widgets work essentially the same, that is, homepage makes a proxied call to an API made available by that service. The majority of the time widgets don't work it is a configuration issue. Of course, sometimes things do break. Some basic steps to check:</p> <ol> <li> <p>URLs should not end with a / or other API path. Each widget will handle the path on its own.</p> </li> <li> <p>All services with a widget require a unique name as well as a unique group (and all subgroups) name.</p> </li> <li> <p>Verify the homepage installation can connect to the IP address or host you are using for the widget <code>url</code>. This is most simply achieved by pinging the server from the homepage machine, in Docker this means from inside the container itself, e.g.:</p> <pre><code>docker exec homepage ping SERVICEIPORDOMAIN\n</code></pre> <p>If your homepage install (container) cannot reach the service then you need to figure out why, for example in Docker this can mean putting the two containers on the same network, checking firewall issues, etc.</p> </li> <li> <p>If you have verified that homepage can in fact reach the service then you can also check the API output using e.g. <code>curl</code>, which is often helpful if you do need to file a bug report. Again, depending on your networking setup this may need to be run from inside the container as IP / hostname resolution can differ inside vs outside.</p> <p>Note</p> <p><code>curl</code> is not installed in the base image by default but can be added inside the container with <code>apk add curl</code>.</p> <p>The exact API endpoints and authentication vary of course, but in many cases instructions can be found by searching the web or if you feel comfortable looking at the homepage source code (e.g. <code>src/widgets/{widget}/widget.js</code>).</p> <p>It is out of the scope of this to go into full detail about how to , but an example for PiHole would be:</p> <pre><code>curl -L -k http://PIHOLEIPORHOST/admin/api.php\n</code></pre> <p>Or for AdGuard:</p> <pre><code>curl -L -k -u 'username:password' http://ADGUARDIPORHOST/control/stats\n</code></pre> <p>Or for Portainer:</p> <pre><code>curl -L -k -H 'X-Api-Key:YOURKEY' 'https://PORTAINERIPORHOST:PORT/api/endpoints/2/docker/containers/json'\n</code></pre> <p>Sonarr:</p> <pre><code>curl -L -k 'http://SONARRIPORHOST:PORT/api/v3/queue?apikey=YOURAPIKEY'\n</code></pre> <p>This will return some data which may reveal an issue causing a true bug in the service widget.</p> </li> </ol>"},{"location":"troubleshooting/#missing-custom-icons","title":"Missing custom icons","text":"<p>If, after correctly adding and mapping your custom icons via the Icons instructions, you are still unable to see your icons please try recreating your container.</p>"},{"location":"troubleshooting/#disabling-ipv6","title":"Disabling IPv6","text":"<p>If you are having issues with certain widgets that are unable to reach public APIs (e.g. weather), in certain setups you may need to disable IPv6. You can set the environment variable <code>HOMEPAGE_PROXY_DISABLE_IPV6</code> to <code>true</code> to disable IPv6 for the homepage proxy.</p> <p>Alternatively, you can use the <code>sysctls</code> option in your docker-compose file to disable IPv6 for the homepage container completely:</p> <pre><code>services:\n  homepage:\n    ...\n    sysctls:\n      - net.ipv6.conf.all.disable_ipv6=1\n</code></pre>"},{"location":"widgets/","title":"Widgets","text":"<p>Homepage has two types of widgets: info and service. Below we'll cover each type and how to configure them.</p> <p>The left navigation of this site contains links to all available widgets.</p>"},{"location":"widgets/#service-widgets","title":"Service Widgets","text":"<p>Service widgets are used to display the status of a service, often a web service or API. Services (and their widgets) are defined in your <code>services.yaml</code> file. Here's an example:</p> <pre><code>- Plex:\n    icon: plex.png\n    href: https://plex.my.host\n    description: Watch movies and TV shows.\n    server: localhost\n    container: plex\n    widgets:\n      - type: tautulli\n        url: http://172.16.1.1:8181\n        key: aabbccddeeffgghhiijjkkllmmnnoo\n      - type: uptimekuma\n        url: http://172.16.1.2:8080\n        slug: aaaaaaabbbbb\n</code></pre> <p>More detail on configuring service widgets can be found in the Service Widgets Config section.</p>"},{"location":"widgets/#info-widgets","title":"Info Widgets","text":"<p>Info widgets are used to display information in the header, often about your system or environment. Info widgets are defined in your <code>widgets.yaml</code> file. Here's an example:</p> <pre><code>- openmeteo:\n    label: Current\n    latitude: 36.66\n    longitude: -117.51\n    cache: 5\n</code></pre> <p>More detail on configuring info widgets can be found in the Info Widgets Config section.</p>"},{"location":"widgets/authoring/","title":"Guides & Tutorials","text":"<p>Widgets are a core component of Homepage. They are used to display information about your system, services, and environment.</p>"},{"location":"widgets/authoring/#overview","title":"Overview","text":"<p>If you are new to Homepage widgets, and are looking to create a new widget, please follow along with the guide here: Widget Tutorial.</p>"},{"location":"widgets/authoring/#translations","title":"Translations","text":"<p>All text and numerical content in widgets should be translated and localized. English is the default language, and other languages can be added via Crowdin.</p> <p>To learn more about translations, please refer to the guide here: Translations Guide.</p>"},{"location":"widgets/authoring/#widget-component","title":"Widget Component","text":"<p>The widget component is the core of the widget. It is responsible for fetching data from the API and rendering the widget UI. Homepage provides a set of hooks and utilities to help you build your widget component.</p> <p>To learn more about widget components, please refer to the guide here: Component Guide.</p>"},{"location":"widgets/authoring/#widget-metadata","title":"Widget Metadata","text":"<p>Widget metadata defines the configuration of the widget. It defines the API endpoint to fetch data from, the proxy handler to use, and any data mappings.</p> <p>To learn more about widget metadata, endpoint and data mapping, please refer to the guide here: Metadata Guide.</p> <p>To learn more about proxy handlers, please refer to the guide here: Proxies Guide.</p> <p>To learn more about making API calls from inside your widget, please refer to the guide here: API Guide.</p>"},{"location":"widgets/authoring/api/","title":"API Guide","text":"<p>Homepage provides the <code>useWidgetAPI</code> hook to help you fetch data from an API. This hook insures that the data is fetched using a proxy, and is critical for security.</p> <p>Here is an example of how the <code>useWidgetAPI</code> hook looks:</p> Fetch data from the stats endpoint<pre><code>import useWidgetAPI from \"utils/proxy/use-widget-api\";\n\nexport default function Component({ service }) {\n  const { data, error } = useWidgetAPI(widget, \"stats\");\n}\n</code></pre>"},{"location":"widgets/authoring/api/#usewidgetapi","title":"<code>useWidgetAPI</code>","text":"<p><code>useWidgetAPI</code> takes three possible arguments:</p> <ul> <li><code>widget</code>: The widget metadata object.</li> <li><code>endpoint</code>: The name of the endpoint to fetch data from.</li> <li><code>params</code>: An optional object containing query parameters to pass to the API.</li> </ul>"},{"location":"widgets/authoring/api/#widget","title":"<code>widget</code>","text":"<p>The <code>widget</code> argument is the metadata object for the widget. It contains information about the API endpoint, proxy handler, and mappings. This object is used by the <code>useWidgetAPI</code> hook to fetch data from the API. This is generally passed in as a prop from the parent component.</p>"},{"location":"widgets/authoring/api/#endpoint","title":"<code>endpoint</code>","text":"<p>The <code>endpoint</code> argument is the name of the endpoint to fetch data from. This is defined in the widget metadata object. The <code>useWidgetAPI</code> hook uses this argument to determine which endpoint to fetch data from.</p> <p>If no endpoint is provided, the <code>useWidgetAPI</code> hook will call the API endpoint defined in the widget metadata object directly.</p>"},{"location":"widgets/authoring/api/#params","title":"<code>params</code>","text":"<p>The <code>params</code> argument is an optional object containing query parameters to pass to the API. This is useful for filtering data or passing additional information to the API. This object is passed directly to the API endpoint as query parameters.</p> <p>Here is an example of how to use the <code>params</code> argument:</p> Fetch data from the stats endpoint with query parameters<pre><code>import useWidgetAPI from \"utils/proxy/use-widget-api\";\n\nexport default function Component({ service }) {\n  const { data, error } = useWidgetAPI(widget, \"stats\", { start: \"2021-01-01\", end: \"2021-12-31\" });\n}\n</code></pre> <p>The <code>params</code> must be whitelisted in the widget metadata object. This is done to prevent arbitrary query parameters from being passed to the API.</p>"},{"location":"widgets/authoring/component/","title":"Component Guide","text":"<p>Homepage widgets are built using React components. These components are responsible for fetching data from the API and rendering the widget UI. Homepage provides a set of hooks and utilities to help you build your widget component.</p>"},{"location":"widgets/authoring/component/#a-basic-widget-component","title":"A Basic Widget Component","text":"<p>Here is an example of a basic widget component:</p> <pre><code>import { useTranslation } from \"next-i18next\";\n\nimport Container from \"components/services/widget/container\";\nimport Block from \"components/services/widget/block\";\nimport useWidgetAPI from \"utils/proxy/use-widget-api\";\n\nexport default function Component({ service }) {\n  const { t } = useTranslation();\n  const { widget } = service;\n  const { data, error } = useWidgetAPI(widget, \"info\");\n\n  if (error) {\n    return &lt;Container service={service} error={error} /&gt;;\n  }\n\n  if (!data) {\n    return (\n      &lt;Container service={service}&gt;\n        &lt;Block label=\"yourwidget.key1\" /&gt;\n        &lt;Block label=\"yourwidget.key2\" /&gt;\n        &lt;Block label=\"yourwidget.key3\" /&gt;\n      &lt;/Container&gt;\n    );\n  }\n\n  return (\n    &lt;Container service={service}&gt;\n      &lt;Block label=\"yourwidget.key1\" value={t(\"common.number\", { value: data.key1 })} /&gt;\n      &lt;Block label=\"yourwidget.key2\" value={t(\"common.number\", { value: data.key2 })} /&gt;\n      &lt;Block label=\"yourwidget.key3\" value={t(\"common.number\", { value: data.key3 })} /&gt;\n    &lt;/Container&gt;\n  );\n}\n</code></pre>"},{"location":"widgets/authoring/component/#breakdown","title":"Breakdown","text":"<p>We'll cover two sections of the widget component: hooks and components.</p>"},{"location":"widgets/authoring/component/#hooks","title":"Hooks","text":"<p><code>useTranslation</code></p> <p>This hook is used to translate text and numerical content in widgets. Homepage provides a set of helpers to help you localize your widgets. You can learn more about translations in the Translations Guide.</p> <p><code>useWidgetAPI</code></p> <p>This hook is used to fetch data from the API. We cover this hook in more detail in the API Guide.</p>"},{"location":"widgets/authoring/component/#components","title":"Components","text":"<p>Homepage provides a set of components to help you build your widget UI. These components are designed to provide a consistent layout, and all widgets are expected to use these components.</p> <p></p> <p><code>&lt;Container&gt;</code></p> <p>This component is a wrapper for the widget. It provides a consistent layout for all widgets.</p> <pre><code>&lt;Container service={service}&gt;&lt;/Container&gt;\n</code></pre> <p><code>service</code> is a prop that is passed to the widget component. It contains information about the service that the widget is displaying.</p> <p>If there is an error fetching data from the API, the <code>error</code> prop can be passed to the <code>Container</code> component.</p> <pre><code>&lt;Container service={service} error={error}&gt;&lt;/Container&gt;\n</code></pre> <p><code>&lt;Block&gt;</code></p> <p>This component is used to display a key-value pair. It takes a label and value as props.</p> <pre><code>&lt;Block label=\"yourwidget.key1\" value={t(\"common.number\", { value: data.key1 })} /&gt;\n</code></pre> <p>The <code>label</code> prop is used to look up the translation key in the translation files. The <code>value</code> prop is used to display the value of the block. To learn more about translations, please refer to the Translations Guide.</p> <p>If there is no data available, the <code>Block</code> component can be used to display a placeholder layout.</p> <pre><code>&lt;Container service={service}&gt;\n  &lt;Block label=\"yourwidget.key1\" /&gt;\n  &lt;Block label=\"yourwidget.key2\" /&gt;\n  &lt;Block label=\"yourwidget.key3\" /&gt;\n&lt;/Container&gt;\n</code></pre>"},{"location":"widgets/authoring/getting-started/","title":"Getting Started","text":"<p>We'll cover getting homepage up and running on your local machine for development, as well as some guidelines for developing new features and widgets.</p>"},{"location":"widgets/authoring/getting-started/#development","title":"Development","text":"<p>First, clone the homepage repository.</p> <p>For installing NPM packages, this project uses pnpm (and so should you!):</p> <pre><code>pnpm install\n</code></pre> <p>Start the development server:</p> <pre><code>pnpm dev\n</code></pre> <p>Open http://localhost:3000 to start.</p> <p>This is a Next.js application, see their documentation for more information.</p>"},{"location":"widgets/authoring/getting-started/#code-linting","title":"Code Linting","text":"<p>Once dependencies have been installed you can lint your code with</p> <pre><code>pnpm lint\n</code></pre>"},{"location":"widgets/authoring/getting-started/#code-formatting-with-pre-commit-hooks","title":"Code formatting with pre-commit hooks","text":"<p>To ensure a consistent style and formatting across the project source, the project utilizes Git <code>pre-commit</code> hooks to perform some formatting and linting before a commit is allowed.</p> <p>Once installed, hooks will run when you commit. If the formatting isn't quite right, the commit will be rejected and you'll need to look at the output and fix the issue. Most hooks will automatically format failing files, so all you need to do is <code>git add</code> those files again and retry your commit.</p> <p>See the pre-commit documentation to get started.</p>"},{"location":"widgets/authoring/getting-started/#preferring-self-hosted-open-source-software","title":"Preferring self-hosted open-source software","text":"<p>In general, homepage is meant to be a dashboard for 'self-hosted' services and we believe it is a small way we can help showcase this kind of software. While exceptions are made, mostly when there is no viable self-hosted / open-source alternative, we ask that any widgets, etc. are developed primarily for a self-hosted tool.</p>"},{"location":"widgets/authoring/getting-started/#new-feature-guidelines","title":"New Feature or Enhancement Guidelines","text":"<ul> <li>New features or enhancements, no matter how small, must be linked to an existing feature request with some comments or 'up-votes' that demonstrate community interest. The purpose of this requirement is to avoid the addition (and maintenance) of features that might only benefit a small number of users.</li> <li>If you have ideas for a larger feature you may want to open a discussion first.</li> </ul>"},{"location":"widgets/authoring/getting-started/#service-widget-guidelines","title":"Service Widget Guidelines","text":"<p>To ensure cohesiveness of various widgets, the following should be used as a guide for developing new widgets:</p> <ul> <li>Please only submit widgets that target a feature request discussion with at least 20 'up-votes'. The purpose of this requirement is to avoid the addition (and maintenance) of service widgets that might only benefit a small number of users.</li> <li>Note that we reserve the right to decline widgets for projects that are very young (eg &lt; ~1y) or those with a small reach (eg low GitHub stars). Again, this is in an effort to keep overall widget maintenance under control.</li> <li>Widgets should be only one row of blocks</li> <li>Widgets should be no more than 4 blocks wide and generally conform to the styling / design choices of other widgets</li> <li>Minimize the number of API calls</li> <li>Avoid the use of custom proxy unless absolutely necessary</li> <li>Widgets should be 'read-only', as in they should not make write changes using the relevant tool's API. Homepage widgets are designed to surface information, not to be a (usually worse) replacement for the tool itself.</li> <li>Widgets should not allow manually overriding the \"refresh interval\" setting, as misconfigured refresh intervals can easily lead to performance issues for users.</li> </ul>"},{"location":"widgets/authoring/metadata/","title":"Metadata Guide","text":"<p>Here, we will go over how to create and configure Homepage widget metadata. Metadata is a JS object that contains information about the widget, such as the API endpoint, proxy handler, and mappings. This metadata is used by Homepage to fetch data from the API and pass it to the widget.</p>"},{"location":"widgets/authoring/metadata/#widgets-configuration","title":"Widgets Configuration","text":"<p>Here are some examples of how to configure a widget's metadata object.</p> Basic ExampleAdvanced Example <pre><code>import genericProxyHandler from \"utils/proxy/handlers/generic\";\n\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  proxyHandler: genericProxyHandler,\n\n  mappings: {\n    stats: { endpoint: \"stats\" }\n  },\n};\n</code></pre> <pre><code>import credentialedProxyHandler from \"utils/proxy/handlers/credentialed\";\nimport { asJson, jsonArrayFilter } from \"utils/proxy/api-helpers\";\n\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  proxyHandler: credentialedProxyHandler,\n\n  mappings: {\n    stats: {\n      endpoint: \"stats\",\n      validate: [\"total\", \"average\"],\n      params: [\"start\", \"end\"],\n    },\n    notices: {\n      endpoint: \"notices\",\n      map: (data) =&gt; {\n        total: asJson(data).length;\n      },\n    },\n    warnings: {\n      endpoint: \"notices\",\n      map: (data) =&gt; {\n        total: jsonArrayFilter(data, (alert) =&gt; alert.type === \"warning\").length;\n      },\n    },\n  },\n};\n</code></pre> <p>A widget's metadata is quite powerful and can be configured in many different ways.</p>"},{"location":"widgets/authoring/metadata/#configuration-properties","title":"Configuration Properties","text":""},{"location":"widgets/authoring/metadata/#api","title":"<code>api</code>","text":"<p>The <code>api</code> property is a string that represents the URL of the API endpoint that the widget will use to fetch data. The URL can contain placeholders that will be replaced with actual values at runtime. For example, the <code>{url}</code> placeholder will be replaced with the URL of the configured widget, and the <code>{endpoint}</code> placeholder will be replaced with the value of the <code>endpoint</code> property in the <code>mappings</code> object.</p> <pre><code>const widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n};\n</code></pre>"},{"location":"widgets/authoring/metadata/#proxyhandler","title":"<code>proxyHandler</code>","text":"<p>The <code>proxyHandler</code> property is a function that will be used to make the API request. Homepage includes some built-in proxy handlers that can be used out of the box:</p> <p>Here is an example of the generic proxy handler that makes unauthenticated requests to the specified API endpoint.</p> widget.jsservices.yaml <pre><code>const widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  proxyHandler: genericProxyHandler,\n};\n</code></pre> <pre><code>- Services:\n    - Your Widget:\n        icon: yourwidget.svg\n        href: https://example.com/\n        widget:\n          type: yourwidget\n          url: http://127.0.0.1:1337\n</code></pre> <p>If you are looking to learn more about proxy handlers, please refer to the guide here: Proxies Guide.</p>"},{"location":"widgets/authoring/metadata/#mappings","title":"<code>mappings</code>","text":"<p>The <code>mappings</code> property is an object that contains information about the API endpoint, such as the endpoint name, validation rules, and parameter names. The <code>mappings</code> object can contain multiple endpoints, each with its own configuration.</p> <p>Security Note</p> <p>The <code>mappings</code> or <code>allowedEndpoints</code> property is required for the widget to fetch data from more than a static URL. Homepage uses a whitelist approach to ensure that widgets only access allowed endpoints.</p> <pre><code>import { asJson } from \"utils/proxy/api-helpers\";\n\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  mappings: {\n    // `/api/stats?start=...&amp;end=...`\n    stats: {\n      endpoint: \"stats\",\n      validate: [\"total\", \"average\"],\n      params: [\"start\", \"end\"],\n    },\n    // `/api/notices`\n    notices: {\n      endpoint: \"notices\",\n      map: (data) =&gt; {\n        total: asJson(data).length;\n      },\n    },\n  },\n};\n</code></pre>"},{"location":"widgets/authoring/metadata/#endpoint","title":"<code>endpoint</code>","text":"<p>The <code>endpoint</code> property is a string that represents the name of the API endpoint that the widget will use to fetch data. This value will be used to replace the <code>{endpoint}</code> placeholder in the <code>api</code> property.</p> <pre><code>const widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  mappings: {\n    // `/api/stats`\n    stats: {\n      endpoint: \"stats\",\n    },\n  },\n};\n</code></pre>"},{"location":"widgets/authoring/metadata/#validate","title":"<code>validate</code>","text":"<p>The <code>validate</code> property is an array of strings that represent the keys that should be validated in the API response. If the response does not contain all of the specified keys, the widget will not render.</p> <pre><code>const widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  mappings: {\n    // `/api/stats`\n    stats: {\n      endpoint: \"stats\",\n      validate: [\"total\", \"average\"],\n    },\n  },\n};\n</code></pre> <p>This configuration will ensure that the API response contains the <code>total</code> and <code>average</code> keys before the widget is rendered.</p>"},{"location":"widgets/authoring/metadata/#params","title":"<code>params</code>","text":"<p>The <code>params</code> property is an array of strings that represent the keys that should be passed as parameters to the API endpoint. These keys will be replaced with the actual values at runtime.</p> widget.jscomponent.jsx <pre><code>const widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  mappings: {\n    // `/api/stats?start=...&amp;end=...`\n    stats: {\n      endpoint: \"stats\",\n      params: [\"start\", \"end\"],\n    },\n  },\n};\n</code></pre> <pre><code>const { data: statsData, error: statsError } = useWidgetAPI(widget, \"stats\", {\n  start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n  end: new Date(),\n});\n</code></pre> <p>This configuration will pass the <code>start</code> and <code>end</code> keys as parameters to the API endpoint. The values are passed as an object to the <code>useWidgetAPI</code> hook.</p>"},{"location":"widgets/authoring/metadata/#map","title":"<code>map</code>","text":"<p>The <code>map</code> property is a function that will be used to transform the API response before it is passed to the widget. This function is passed the raw API response and should return the transformed data.</p> <pre><code>import { asJson } from \"utils/proxy/api-helpers\";\n\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  mappings: {\n    // `/api/notices`\n    notices: {\n      endpoint: \"notices\",\n      map: (data) =&gt; {\n        total: asJson(data).length;\n      },\n    },\n    // `/api/notices`\n    warnings: {\n      endpoint: \"notices\",\n      map: (data) =&gt; {\n        total: asJson(data).filter((alert) =&gt; alert.type === \"warning\").length;\n      },\n    },\n  },\n};\n</code></pre>"},{"location":"widgets/authoring/metadata/#method","title":"<code>method</code>","text":"<p>The <code>method</code> represents the HTTP method that should be used to make the API request. The default value is <code>GET</code>. Note that <code>POST</code> requests are not allowed via the widget API and require the use of a custom proxy.</p>"},{"location":"widgets/authoring/metadata/#headers","title":"<code>headers</code>","text":"<p>The <code>headers</code> property is an object that contains additional headers that should be included in the API request. If your endpoint requires specific headers, you can include them here.</p> <pre><code>const widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  mappings: {\n    // `/api/stats`\n    stats: {\n      endpoint: \"stats\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    },\n  },\n};\n</code></pre>"},{"location":"widgets/authoring/metadata/#body","title":"<code>body</code>","text":"<p>The <code>body</code> property is an object that contains the data that should be sent in the request body. This property is only used when the <code>method</code> property is set to <code>POST</code> or <code>PUT</code>.</p> <pre><code>const widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  mappings: {\n    // `/api/graphql`\n    stats: {\n      endpoint: \"graphql\",\n      body: {\n        query: `\n          query {\n            stats {\n              total\n              average\n            }\n          }\n        `,\n      },\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    },\n  },\n};\n</code></pre>"},{"location":"widgets/authoring/metadata/#allowedendpoints","title":"<code>allowedEndpoints</code>","text":"<p>The <code>allowedEndpoints</code> property is a RegExp that represents the allowed endpoints that the widget can use. If the widget tries to access an endpoint that is not allowed, the request will be blocked.</p> <p><code>allowedEndpoints</code> can be used when endpoint validation is simple and can be done using a regular expression, and more control is not required.</p> <p>Security Note</p> <p>The <code>mappings</code> or <code>allowedEndpoints</code> property is required for the widget to fetch data from more than a static URL. Homepage uses a whitelist approach to ensure that widgets only access allowed endpoints.</p> <pre><code>const widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  allowedEndpoints: /^stats|notices$/,\n};\n</code></pre> <p>This configuration will only allow the widget to access the <code>stats</code> and <code>notices</code> endpoints.</p>"},{"location":"widgets/authoring/proxies/","title":"Proxies Guide","text":"<p>Homepage includes a set of built-in proxy handlers that can be used to fetch data from an API. We will go over how to use these proxy handlers and briefly cover how to create your own.</p>"},{"location":"widgets/authoring/proxies/#available-proxy-handlers","title":"Available Proxy Handlers","text":"<p>Homepage comes with a few built-in proxy handlers that can be used to fetch data from an API. These handlers are located in the <code>utils/proxy/handlers</code> directory.</p>"},{"location":"widgets/authoring/proxies/#genericproxyhandler","title":"<code>genericProxyHandler</code>","text":"<p>A proxy handler that makes generally unauthenticated requests to the specified API endpoint.</p> <pre><code>import genericProxyHandler from \"utils/proxy/handlers/generic\";\n\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}\",\n  proxyHandler: genericProxyHandler,\n};\n</code></pre> <p>You can also pass API keys from the widget configuration to the proxy handler, for authenticated requests.</p> widget.jsservices.yaml <pre><code>import genericProxyHandler from \"utils/proxy/handlers/generic\";\n\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}?key={key}\",\n  proxyHandler: genericProxyHandler,\n};\n</code></pre> <pre><code># Widget Configuration\n- Your Widget:\n    icon: yourwidget.svg\n    href: https://example.com/\n    widget:\n      type: yourwidget\n      url: http://example.com\n      key: your-api-key\n</code></pre>"},{"location":"widgets/authoring/proxies/#credentialedproxyhandler","title":"<code>credentialedProxyHandler</code>","text":"<p>A proxy handler that makes authenticated requests by setting request headers. Credentials are pulled from the widgets configuration.</p> <p>By default the key is passed as an <code>X-API-Key</code> header. If you need to pass the key as something else, either add a case to the credentialedProxyHandler or create a new proxy handler.</p> widget.jsservices.yaml <pre><code>import credentialedProxyHandler from \"utils/proxy/handlers/credentialed\";\n\nconst widgetExample = {\n  api: \"{url}/api/{endpoint}?key={key}\",\n  proxyHandler: credentialedProxyHandler,\n};\n</code></pre> <pre><code>- Your Widget:\n    icon: yourwidget.svg\n    href: https://example.com/\n    widget:\n      type: yourwidget\n      url: http://127.0.0.1:1337\n      key: your-api-key\n</code></pre>"},{"location":"widgets/authoring/proxies/#jsonrpcproxyhandler","title":"<code>jsonrpcProxyHandler</code>","text":"<p>A proxy handler that makes authenticated JSON-RPC requests to the specified API endpoint, either using username + password or an API token. The endpoint is the method to call and queryParams are used as the parameters.</p> component.jswidget.jsservices.yaml <pre><code>import Container from \"components/services/widget/container\";\nimport useWidgetAPI from \"utils/proxy/use-widget-api\";\n\nexport default function Component({ service }) {\n  const { widget } = service;\n\n  const { data, error } = useWidgetAPI(widget, 'trigger', { \"triggerids\": \"14062\", \"output\": \"extend\", \"selectFunctions\": \"extend\" });\n}\n</code></pre> <pre><code>import jsonrpcProxyHandler from \"utils/proxy/handlers/jsonrpc\";\n\nconst widgetExample = {\n  api: \"{url}/api/jsonrpc\",\n  proxyHandler: jsonrpcProxyHandler,\n\n  mappings: {\n    total: { endpoint: \"total\" },\n    average: { endpoint: \"average\" },\n    trigger: { endpoint: \"trigger.get\" },\n  },\n};\n</code></pre> <pre><code>- Your Widget:\n    icon: yourwidget.svg\n    href: https://example.com/\n    widget:\n      type: yourwidget\n      url: http://127.0.0.1:1337\n      username: your-username\n      password: your-password\n</code></pre> <pre><code>- Your Widget:\n    icon: yourwidget.svg\n    href: https://example.com/\n    widget:\n      type: yourwidget\n      url: http://127.0.0.1:1337\n      key: your-api-token\n</code></pre>"},{"location":"widgets/authoring/proxies/#synologyproxyhandler","title":"<code>synologyProxyHandler</code>","text":"<p>A proxy handler that makes authenticated requests to the specified Synology API endpoint. This is used exclusively for Synology DSM services.</p> widget.jsservices.yaml <pre><code>import synologyProxyHandler from \"utils/proxy/handlers/synology\";\n\nconst widgetExample = {\n  api: \"{url}/webapi/{cgiPath}?api={apiName}&amp;version={maxVersion}&amp;method={apiMethod}\",\n  proxyHandler: synologyProxyHandler,\n\n  mappings: {\n    system_storage: {\n      apiName: \"SYNO.Core.System\",\n      apiMethod: 'info&amp;type=\"storage\"',\n      endpoint: \"system_storage\",\n    }\n  },\n};\n</code></pre> <pre><code>- Your Widget:\n    icon: yourwidget.svg\n    href: https://example.com/\n    widget:\n      type: yourwidget\n      url: http://127.0.0.1:1337\n      username: your-username\n      password: your-password\n</code></pre>"},{"location":"widgets/authoring/proxies/#creating-a-custom-proxy-handler","title":"Creating a Custom Proxy Handler","text":"<p>You can create your own proxy handler to fetch data from an API. A proxy handler is a function that takes a configuration object and returns a function that makes the API request.</p> <p>The proxy handler function takes three arguments:</p> <ul> <li><code>req</code>: The request object.</li> <li><code>res</code>: The response object.</li> <li><code>map</code>: A function that maps the API response to the widget data.</li> </ul> <p>The proxy handler function should return a promise that resolves to the API response.</p> <p>Here is an example of a simple proxy handler that fetches data from an API and passes it to the widget:</p> <pre><code>import createLogger from \"utils/logger\";\nimport { httpProxy } from \"utils/proxy/http\";\n\nconst logger = createLogger(\"customProxyHandler\");\n\nexport default async function customProxyHandler(req, res, map) {\n  const { url } = req.query;\n\n  const [status, contentType, data] = await httpProxy(url);\n\n  return res.status(status).send(data);\n}\n</code></pre> <p>Proxy handlers are a complex topic and require a good understanding of JavaScript and the Homepage codebase. If you are new to Homepage, we recommend using the built-in proxy handlers.</p>"},{"location":"widgets/authoring/translations/","title":"Translations Guide","text":"<p>All text and numerical content in widgets should be translated and localized. English is the default language, and other languages can be added via Crowdin.</p>"},{"location":"widgets/authoring/translations/#translations","title":"Translations","text":"<p>Homepage uses the next-i18next library to handle translations. This library provides a set of hooks and utilities to help you localize your widgets, and Homepage has extended this library to support additional features.</p> component.jsx <pre><code>import { useTranslation } from \"next-i18next\";\n\nimport Container from \"components/services/widget/container\";\nimport Block from \"components/services/widget/block\";\n\nexport default function Component() {\n  const { t } = useTranslation();\n\n  return (\n    &lt;Container service={service}&gt;\n      &lt;Block label=\"yourwidget.key1\" /&gt;\n      &lt;Block label=\"yourwidget.key2\" /&gt;\n      &lt;Block label=\"yourwidget.key3\" /&gt;\n    &lt;/Container&gt;\n  );\n}\n</code></pre>"},{"location":"widgets/authoring/translations/#set-up-translation-strings","title":"Set up translation strings","text":"<p>Homepage uses translated and localized strings for all text and numerical content in widgets. English is the default language, and other languages can be added via Crowdin. To add the English translations for your widget, follow these steps:</p> <p>Open the <code>public/locales/en/common.json</code> file.</p> <p>Add a new object for your widget to the bottom of the list, like this:</p> <pre><code>\"yourwidget\": {\n  \"key1\": \"Value 1\",\n  \"key2\": \"Value 2\",\n  \"key3\": \"Value 3\"\n}\n</code></pre> <p>Note</p> <p>Even if you natively speak another language, you should only add English translations. You can then add translations in your native language via Crowdin, once your widget is merged.</p>"},{"location":"widgets/authoring/translations/#common-translations","title":"Common Translations","text":"<p>Homepage provides a set of common translations that you can use in your widgets. These translations are used to format numerical content, dates, and other common elements.</p>"},{"location":"widgets/authoring/translations/#numbers","title":"Numbers","text":"Key Translation Description <code>common.bytes</code> <code>1,000 B</code> Format a number in bytes. <code>common.bits</code> <code>1,000 bit</code> Format a number in bits. <code>common.bbytes</code> <code>1 KiB</code> Format a number in binary bytes. <code>common.bbits</code> <code>1 Kibit</code> Format a number in binary bits. <code>common.byterate</code> <code>1,000 B/s</code> Format a byte rate. <code>common.bibyterate</code> <code>1 KiB/s</code> Format a binary byte rate. <code>common.bitrate</code> <code>1,000 bit/s</code> Format a bit rate. <code>common.bibitrate</code> <code>1 Kibit/s</code> Format a binary bit rate. <code>common.percent</code> <code>50%</code> Format a percentage. <code>common.number</code> <code>1,000</code> Format a number. <code>common.ms</code> <code>1,000 ms</code> Format a number in milliseconds. <code>common.date</code> <code>2024-01-01</code> Format a date. <code>common.relativeDate</code> <code>1 day ago</code> Format a relative date. <code>common.duration</code> <code>1 day, 1 hour</code> Format an duration."},{"location":"widgets/authoring/translations/#text","title":"Text","text":"Key Translation Description <code>resources.cpu</code> <code>CPU</code> CPU usage. <code>resources.mem</code> <code>MEM</code> Memory usage. <code>resources.total</code> <code>Total</code> Total resource. <code>resources.free</code> <code>Free</code> Free resource. <code>resources.used</code> <code>Used</code> Used resource. <code>resources.load</code> <code>Load</code> Load value. <code>resources.temp</code> <code>TEMP</code> Temperature value. <code>resources.max</code> <code>Max</code> Maximum value. <code>resources.uptime</code> <code>UP</code> Uptime."},{"location":"widgets/authoring/tutorial/","title":"Widget Tutorial","text":"<p>In this guide, we'll walk through the process of creating a custom widget for Homepage. We'll cover the basic structure of a widget, how to use translations, and how to fetch data from an API. By the end of this guide, you'll have a solid understanding of how to build your own custom widget.</p> <p>Prerequisites:</p> <ul> <li>Basic knowledge of React and JavaScript</li> <li>Familiarity with the Homepage platform</li> <li>Understanding of JSON and API interactions</li> </ul> <p>Throughout this guide, we'll use <code>yourwidget</code> as a placeholder for the unique name of your custom widget. Replace <code>yourwidget</code> with the actual name of your widget. It should contain only lowercase letters and no spaces.</p> <p>This guide makes use of a fake API, which would return a JSON response as such, when called with the <code>v1/info</code> endpoint:</p> <pre><code>{ \"key1\": 123, \"key2\": 456, \"key3\": 789 }\n</code></pre>"},{"location":"widgets/authoring/tutorial/#set-up-the-widget-definition","title":"Set up the widget definition","text":"<p>Create a new folder for your widget in the <code>src/widgets</code> directory. Name the folder <code>yourwidget</code>.</p> <p>Inside the <code>yourwidget</code> folder, create a new file named <code>widget.js</code>. This file will contain the metadata for your widget.</p> <p>Open the <code>widget.js</code> file and add the following code:</p> src/widgets/yourwidget/widget.js<pre><code>import genericProxyHandler from \"utils/proxy/handlers/generic\"; // (1)!\n\nconst widget = /* (2)! */ {\n  api: \"{url}/{endpoint}\" /* (3)! */,\n  proxyHandler: genericProxyHandler /* (1)! */,\n\n  mappings: /* (4)! */ {\n    info: /* (5)! */ {\n      endpoint: \"v1/info\" /* (6)! */,\n    },\n  },\n};\n\nexport default widget;\n</code></pre> <ol> <li>We import the <code>genericProxyHandler</code> from the <code>utils/proxy/handlers/generic</code> module. The <code>genericProxyHandler</code> is a generic handler that can be used to fetch data from an API. We then assign the <code>genericProxyHandler</code> to the <code>proxyHandler</code> property of the <code>widget</code> object. There are other handlers available that you can use depending on your requirements. You can also create custom handlers if needed.</li> <li>We define a <code>widget</code> object that contains the metadata for the widget.</li> <li>The API endpoint to fetch data from. You can use placeholders like <code>{url}</code> and <code>{endpoint}</code> to dynamically generate the API endpoint based on the widget configuration.</li> <li>An object that contains mappings for different endpoints. Each mapping should have an <code>endpoint</code> property that specifies the endpoint to fetch data from.</li> <li>A mapping named <code>info</code> that specifies the <code>v1/info</code> endpoint to fetch data from. This would be called from the component as such: <code>useWidgetAPI(widget, \"info\");</code></li> <li>The <code>endpoint</code> property of the <code>info</code> mapping specifies the endpoint to fetch data from. There are other properties you can pass to the mapping, such as <code>method</code>, <code>headers</code>, and <code>body</code>.</li> </ol> <p>Important</p> <p>All widgets that fetch data from dynamic endpoints should have either <code>mappings</code> or an <code>allowedEndpoints</code> property.</p>"},{"location":"widgets/authoring/tutorial/#including-translation-strings-in-your-widget","title":"Including translation strings in your widget","text":"<p>Refer to the translations guide for more details. The Homepage community prides itself on being multilingual, and we strongly encourage you to add translations for your widgets.</p>"},{"location":"widgets/authoring/tutorial/#create-the-widget-component","title":"Create the widget component","text":"<p>Create a new file for your widgets component, named <code>component.jsx</code>, in the <code>src/widgets/yourwidget</code> directory. We'll build the contents of the <code>component.jsx</code> file step by step.</p> <p>First, we'll import the necessary dependencies:</p> src/widgets/yourwidget/component.jsx<pre><code>import { useTranslation } from \"next-i18next\"; // (1)!\n\nimport Container from \"components/services/widget/container\"; // (2)!\nimport Block from \"components/services/widget/block\"; // (3)!\nimport useWidgetAPI from \"utils/proxy/use-widget-api\"; // (4)!\n</code></pre> <ol> <li><code>useTranslation()</code> is a hook provided by <code>next-i18next</code> that allows us to access the translation strings</li> <li><code>&lt;Container&gt;</code> and <code>&lt;Block&gt;</code> are custom components that we'll use to structure our widget.</li> <li><code>&lt;Container&gt;</code> and <code>&lt;Block&gt;</code> are custom components that we'll use to structure our widget.</li> <li><code>useWidgetAPI(widget, endpoint)</code> is a custom hook that we'll use to fetch data from an API.</li> </ol> <p>Next, we'll define a functional component named <code>Component</code> that takes a <code>service</code> prop.</p> src/widgets/yourwidget/component.jsx<pre><code>export default function Component({ service }) {}\n</code></pre> <p>We grab the helper functions from the <code>useTranslation</code> hook.</p> src/widgets/yourwidget/component.jsx<pre><code>const { t } = useTranslation();\n</code></pre> <p>We destructure the <code>widget</code> object from the <code>service</code> prop. The <code>widget</code> object contains the metadata for the widget, such as the API endpoint to fetch data from.</p> src/widgets/yourwidget/component.jsx<pre><code>const { widget } = service;\n</code></pre> <p>Now, the fun part! We use the <code>useWidgetAPI</code> hook to fetch data from an API. The <code>useWidgetAPI</code> hook takes two arguments: the <code>widget</code> object and the API endpoint to fetch data from. The <code>useWidgetAPI</code> hook returns an object with <code>data</code> and <code>error</code> properties.</p> src/widgets/yourwidget/component.jsx<pre><code>const { data, error } = useWidgetAPI(widget, \"info\");\n</code></pre> <p>API Tips</p> <p>You'll see here how part of the API url is built using the <code>url</code> and <code>endpoint</code> properties from the widget definition.</p> <p>In this case, we're fetching data from the <code>info</code> endpoint.  The <code>info</code> endpoint is defined in the <code>mappings</code> object.  So the full API endpoint will be <code>\"{url}/v1/info\"</code>.</p> <p>The mapping and endpoint are often the same, but must be defined regardless.</p> <p>Next, we check if there's an error or no data.</p> <p>If there's an error, we return a <code>Container</code> and pass it the <code>service</code> and <code>error</code> as props. The <code>Container</code> component will handle displaying the error message.</p> src/widgets/yourwidget/component.jsx<pre><code>if (error) {\n  return &lt;Container service={service} error={error} /&gt;;\n}\n</code></pre> <p>If there's no data, we return a <code>Container</code> component with three <code>Block</code> components, each with a <code>label</code>.</p> src/widgets/yourwidget/component.jsx<pre><code>if (!data) {\n  return (\n    &lt;Container service={service}&gt;\n      &lt;Block label=\"yourwidget.key1\" /&gt;\n      &lt;Block label=\"yourwidget.key2\" /&gt;\n      &lt;Block label=\"yourwidget.key3\" /&gt;\n    &lt;/Container&gt;\n  );\n}\n</code></pre> <p>This will render the widget with placeholders for the data, i.e., a skeleton view.</p> <p>Translation Tips</p> <p>The <code>label</code> prop in the <code>Block</code> component corresponds to the translation key we defined earlier in the <code>common.json</code> file.  All text and numerical content should be translated.</p> <p>If there is data, we return a <code>Container</code> component with three <code>Block</code> components, each with a <code>label</code> and a <code>value</code>.</p> <p>Here we use the <code>t</code> function from the <code>useTranslation</code> hook to translate the data values. The <code>t</code> function takes the translation key and an object with variables to interpolate into the translation string.</p> <p>We're using the <code>common.number</code> translation key to format the data values as numbers. This allows for easy localization of numbers, such as using commas or periods as decimal separators.</p> <p>There are a large number of <code>common</code> numerical translation keys available, which you can learn more about in the Translation Guide.</p> src/widgets/yourwidget/component.jsx<pre><code>return (\n  &lt;Container service={service}&gt;\n    &lt;Block label=\"yourwidget.key1\" value={t(\"common.number\", { value: data.key1 })} /&gt;\n    &lt;Block label=\"yourwidget.key2\" value={t(\"common.number\", { value: data.key2 })} /&gt;\n    &lt;Block label=\"yourwidget.key3\" value={t(\"common.number\", { value: data.key3 })} /&gt;\n  &lt;/Container&gt;\n);\n</code></pre> <p>Here's the complete <code>component.jsx</code> file:</p> src/widgets/yourwidget/component.jsx<pre><code>import { useTranslation } from \"next-i18next\";\n\nimport Container from \"components/services/widget/container\";\nimport Block from \"components/services/widget/block\";\nimport useWidgetAPI from \"utils/proxy/use-widget-api\";\n\nexport default function Component({ service }) {\n  const { t } = useTranslation();\n  const { widget } = service;\n  const { data, error } = useWidgetAPI(widget, \"info\");\n\n  if (error) {\n    return &lt;Container service={service} error={error} /&gt;;\n  }\n\n  if (!data) {\n    return (\n      &lt;Container service={service}&gt;\n        &lt;Block label=\"yourwidget.key1\" /&gt;\n        &lt;Block label=\"yourwidget.key2\" /&gt;\n        &lt;Block label=\"yourwidget.key3\" /&gt;\n      &lt;/Container&gt;\n    );\n  }\n\n  return (\n    &lt;Container service={service}&gt;\n      &lt;Block label=\"yourwidget.key1\" value={t(\"common.number\", { value: data.key1 })} /&gt;\n      &lt;Block label=\"yourwidget.key2\" value={t(\"common.number\", { value: data.key2 })} /&gt;\n      &lt;Block label=\"yourwidget.key3\" value={t(\"common.number\", { value: data.key3 })} /&gt;\n    &lt;/Container&gt;\n  );\n}\n</code></pre>"},{"location":"widgets/authoring/tutorial/#add-the-widget-to-the-homepage","title":"Add the widget to the Homepage","text":"<p>To add your widget to the Homepage, you need to register it in the <code>src/widgets/widgets.js</code> file.</p> <p>Open the <code>src/widgets/widgets.js</code> file and import the <code>Component</code> from your widget's <code>component.jsx</code> file. Please keep the alphabetical order.</p> <pre><code>// ...\nimport yourwidget from \"./yourwidget/widget\";\n// ...\n</code></pre> <p>Add <code>yourwidget</code> to the <code>widgets</code> object. Please keep the alphabetical order.</p> <pre><code>const widgets = {\n  // ...\n  yourwidget: yourwidget,\n  // ...\n};\n</code></pre> <p>You also need to add the widget to the <code>components</code> object in the <code>src/widgets/components.js</code> file.</p> <p>Open the <code>src/widgets/components.js</code> file and import the <code>Component</code> from your widget's <code>component.jsx</code> file.</p> <p>Please keep the alphabetical order.</p> <pre><code>const components = {\n  // ...\n  yourwidget: dynamic(() =&gt; import(\"./yourwidget/component\")),\n  // ...\n};\n</code></pre>"},{"location":"widgets/authoring/tutorial/#using-the-widget","title":"Using the widget","text":"<p>You can now use your custom widget in your Homepage. Open your <code>services.yaml</code> file and add a new service with the <code>yourwidget</code> widget.</p> <pre><code>- Services:\n    - Your Widget:\n        icon: yourwidget.svg\n        href: https://example.com/\n        widget:\n          type: yourwidget\n          url: http://127.0.0.1:1337\n</code></pre> <p>API Tips</p> <p>You'll see here how part of the API url is built using the <code>url</code> and <code>endpoint</code> properties from the widget definition.</p> <p>We defined the api endpoint as <code>\"{url}/{endpoint}\"</code>.  This is where the <code>url</code> is defined.  So the full API endpoint will be <code>http://127.0.0.1:1337/{endpoint}</code>.</p> <p>That's it! You've successfully created a custom widget for Homepage. If you have any questions or need help, feel free to reach out to the Homepage community for assistance. Happy coding!</p>"},{"location":"widgets/info/datetime/","title":"Date & Time","text":"<p>This allows you to display the date and/or time, can be heavily configured using Intl.DateTimeFormat.</p> <p>Formatting is locale aware and will present your date in the regional format you expect, for example, <code>9/16/22, 3:03 PM</code> for locale <code>en</code> and <code>16.09.22, 15:03</code> for <code>de</code>. You can also specify a locale just for the datetime widget with the <code>locale</code> option (see below).</p> <pre><code>- datetime:\n    text_size: xl\n    format:\n      timeStyle: short\n</code></pre> <p>Any options passed to <code>format</code> are passed directly to Intl.DateTimeFormat, please reference the MDN documentation for all available options.</p> <p>Valid text sizes are <code>4xl</code>, <code>3xl</code>, <code>2xl</code>, <code>xl</code>, <code>md</code>, <code>sm</code>, <code>xs</code>.</p> <p>A few examples,</p> <pre><code># 13:37\nformat:\n  timeStyle: short\n  hourCycle: h23\n</code></pre> <pre><code># 1:37 PM\nformat:\n  timeStyle: short\n  hour12: true\n</code></pre> <pre><code># 1/23/22, 1:37 PM\nformat:\n  dateStyle: short\n  timeStyle: short\n  hour12: true\n</code></pre> <pre><code># 4 januari 2023 om 13:51:25 PST\nlocale: nl\nformat:\n  dateStyle: long\n  timeStyle: long\n</code></pre>"},{"location":"widgets/info/glances/","title":"Glances","text":"<p>(Find the Glances service widget here)</p> <p>The Glances widget allows you to monitor the resources (CPU, memory, storage, temp &amp; uptime) of host or another machine, and is designed to match the <code>resources</code> info widget. You can have multiple instances by adding another configuration block. The <code>cputemp</code>, <code>uptime</code> &amp; <code>disk</code> states require separate API calls and thus are not enabled by default. Glances needs to be running in \"web server\" mode to enable the API, see the glances docs.</p> <pre><code>- glances:\n    url: http://host.or.ip:port\n    username: user # optional if auth enabled in Glances\n    password: pass # optional if auth enabled in Glances\n    version: 4 # required only if running glances v4 or higher, defaults to 3\n    cpu: true # optional, enabled by default, disable by setting to false\n    mem: true # optional, enabled by default, disable by setting to false\n    cputemp: true # disabled by default\n    uptime: true # disabled by default\n    disk: / # disabled by default, use mount point of disk(s) in glances. Can also be a list (see below)\n    diskUnits: bytes # optional, bytes (default) or bbytes. Only applies to disk\n    expanded: true # show the expanded view\n    label: MyMachine # optional\n</code></pre> <p>Multiple disks can be specified as:</p> <pre><code>disk:\n  - /\n  - /boot\n  ...\n</code></pre> <p>Added in v0.4.18, updated in v0.6.11, v0.6.21</p>"},{"location":"widgets/info/greeting/","title":"Greeting","text":"<p>This allows you to display simple text, can be configured like so:</p> <pre><code>- greeting:\n    text_size: xl\n    text: Greeting Text\n</code></pre> <p>Valid text sizes are <code>4xl</code>, <code>3xl</code>, <code>2xl</code>, <code>xl</code>, <code>md</code>, <code>sm</code>, <code>xs</code>.</p>"},{"location":"widgets/info/kubernetes/","title":"Kubernetes","text":"<p>This is very similar to the Resources widget, but provides resource information about a Kubernetes cluster.</p> <p>It provides CPU and Memory usage, by node and/or at the cluster level.</p> <pre><code>- kubernetes:\n    cluster:\n      # Shows cluster-wide statistics\n      show: true\n      # Shows the aggregate CPU stats\n      cpu: true\n      # Shows the aggregate memory stats\n      memory: true\n      # Shows a custom label\n      showLabel: true\n      label: \"cluster\"\n    nodes:\n      # Shows node-specific statistics\n      show: true\n      # Shows the CPU for each node\n      cpu: true\n      # Shows the memory for each node\n      memory: true\n      # Shows the label, which is always the node name\n      showLabel: true\n</code></pre>"},{"location":"widgets/info/logo/","title":"Logo","text":"<p>This allows you to display the homepage logo, you can optionally specify your own icon using similar options as other icons, see service icons.</p> <pre><code>- logo:\n    icon: https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/I_Love_New_York.svg/1101px-I_Love_New_York.svg.png # optional\n</code></pre> <p>Added in v0.4.18, updated in 0.X.X</p>"},{"location":"widgets/info/longhorn/","title":"Longhorn","text":"<p>The Longhorn widget pulls storage utilization metrics from the Longhorn storage driver on Kubernetes. It is designed to appear similar to the Resource widget's disk representation.</p> <p>The exact metrics should be very similar to what is seen on the Longhorn dashboard itself.</p> <p>It can show the aggregate metrics and/or the individual node metrics.</p> <pre><code>- longhorn:\n    # Show the expanded view\n    expanded: true\n    # Shows a node representing the aggregate values\n    total: true\n    # Shows the node names as labels\n    labels: true\n    # Show the nodes\n    nodes: true\n    # An explicit list of nodes to show. All are shown by default if \"nodes\" is true\n    include:\n      - node1\n      - node2\n</code></pre> <p>The Longhorn URL and credentials are stored in the <code>providers</code> section of the <code>settings.yaml</code>. e.g.:</p> <pre><code>providers:\n  longhorn:\n    username: \"longhorn-username\" # optional\n    password: \"very-secret-longhorn-password\" # optional\n    url: https://longhorn.aesop.network\n</code></pre>"},{"location":"widgets/info/openmeteo/","title":"Open-Meteo","text":"<p>Homepage's recommended weather widget. No registration is required at all! See https://open-meteo.com/en/docs</p> <pre><code>- openmeteo:\n    label: Kyiv # optional\n    latitude: 50.449684\n    longitude: 30.525026\n    timezone: Europe/Kiev # optional\n    units: metric # or imperial\n    cache: 5 # Time in minutes to cache API responses, to stay within limits\n    format: # optional, Intl.NumberFormat options\n      maximumFractionDigits: 1\n</code></pre> <p>You can optionally not pass a <code>latitude</code> and <code>longitude</code> and the widget will use your current location (requires a secure context, eg. HTTPS).</p>"},{"location":"widgets/info/openweathermap/","title":"OpenWeatherMap","text":"<p>The free tier \"One Call API\" is all that's required, you will need to subscribe and grab your API key.</p> <pre><code>- openweathermap:\n    label: Kyiv #optional\n    latitude: 50.449684\n    longitude: 30.525026\n    units: metric # or imperial\n    provider: openweathermap\n    apiKey: youropenweathermapkey # required only if not using provider, this reveals api key in requests\n    cache: 5 # Time in minutes to cache API responses, to stay within limits\n    format: # optional, Intl.NumberFormat options\n      maximumFractionDigits: 1\n</code></pre> <p>You can optionally not pass a <code>latitude</code> and <code>longitude</code> and the widget will use your current location (requires a secure context, eg. HTTPS).</p>"},{"location":"widgets/info/resources/","title":"Resources","text":"<p>You can include all or some of the available resources. If you do not want to see that resource, simply pass <code>false</code>.</p> <p>The disk path is the path reported by <code>df</code> (Mounted On), or the mount point of the disk.</p> <p>The cpu and memory resource information are the container's usage while glances displays statistics for the host machine on which it is installed.</p> <p>The resources widget primarily relies on a popular tool called systeminformation. Thus, any limitiations of that software apply, for example, BRTFS RAID is not supported for the disk usage. In this case users may want to use the glances widget instead.</p> <p>Note: unfortunately, the package used for getting CPU temp (systeminformation) is not compatible with some setups and will not report any value(s) for CPU temp.</p> <p>Any disk you wish to access must be mounted to your container as a volume.</p> <pre><code>- resources:\n    cpu: true\n    memory: true\n    disk: /disk/mount/path\n    cputemp: true\n    tempmin: 0 # optional, minimum cpu temp\n    tempmax: 100 # optional, maximum cpu temp\n    uptime: true\n    units: imperial # only used by cpu temp, options: 'imperial' or 'metric'\n    refresh: 3000 # optional, in ms\n    diskUnits: bytes # optional, bytes (default) or bbytes. Only applies to disk\n    network: true # optional, uses 'default' if true or specify a network interface name\n</code></pre> <p>You can also pass a <code>label</code> option, which allows you to group resources under named sections,</p> <pre><code>- resources:\n    label: System\n    cpu: true\n    memory: true\n\n- resources:\n    label: Storage\n    disk: /mnt/storage\n</code></pre> <p>Which produces something like this,</p> <p></p> <p>If you have more than a single disk and would like to group them together under the same label, you can pass an array of paths instead,</p> <pre><code>- resources:\n    label: Storage\n    disk:\n      - /mnt/storage\n      - /mnt/backup\n      - /mnt/media\n</code></pre> <p>To produce something like this,</p> <p></p> <p>You can additionally supply an optional <code>expanded</code> property set to true in order to show additional details about the resources. By default the expanded property is set to false when not supplied.</p> <pre><code>- resources:\n    label: Array Disks\n    expanded: true\n    disk:\n      - /disk1\n      - /disk2\n      - /disk3\n</code></pre> <p></p>"},{"location":"widgets/info/search/","title":"Search","text":"<p>You can add a search bar to your top widget area that can search using Google, Duckduckgo, Bing, Baidu, Brave or any other custom provider that supports the basic <code>?q=</code> search query param.</p> <pre><code>- search:\n    provider: google # google, duckduckgo, bing, baidu, brave or custom\n    focus: true # Optional, will set focus to the search bar on page load\n    showSearchSuggestions: true # Optional, will show search suggestions. Defaults to false\n    target: _blank # One of _self, _blank, _parent or _top\n</code></pre> <p>or for a custom search:</p> <pre><code>- search:\n    provider: custom\n    url: https://www.ecosia.org/search?q=\n    target: _blank\n    suggestionUrl: https://ac.ecosia.org/autocomplete?type=list&amp;q= # Optional\n    showSearchSuggestions: true # Optional\n</code></pre> <p>multiple providers is also supported via a dropdown (excluding custom):</p> <pre><code>- search:\n    provider: [brave, google, duckduckgo]\n</code></pre> <p>The response body for the URL provided with the <code>suggestionUrl</code> option should look like this:</p> <pre><code>[\n  \"home\",\n  [\n    \"home depot\",\n    \"home depot near me\",\n    \"home equity loan\",\n    \"homeworkify\",\n    \"homedepot.com\",\n    \"homebase login\",\n    \"home depot credit card\",\n    \"home goods\"\n  ]\n]\n</code></pre> <p>The first entry of the array contains the search query, the second one is an array of the suggestions. In the example above, the search query was home.</p> <p>Added in v0.1.6, updated in 0.6.0</p>"},{"location":"widgets/info/stocks/","title":"Stocks","text":"<p>(Find the Stocks service widget here)</p> <p>The Stocks Information Widget allows you to include basic stock market data in your Homepage header. The widget includes the current price of a stock, and the change in price for the day.</p> <p>Finnhub.io is currently the only supported provider for the stocks widget. You can sign up for a free api key at finnhub.io. You are encouraged to read finnhub.io's terms of service/privacy policy before signing up. The documentation for the endpoint that is utilized can be viewed here.</p> <p>You must set <code>finnhub</code> as a provider in your <code>settings.yaml</code> like below:</p> <pre><code>providers:\n  finnhub: yourfinnhubapikeyhere\n</code></pre> <p>Next, configure the stocks widget in your <code>widgets.yaml</code>:</p> <p>The information widget allows for up to 8 items in the watchlist.</p> <pre><code>- stocks:\n    provider: finnhub\n    color: true # optional, defaults to true\n    cache: 1 # optional, default caches results for 1 minute\n    watchlist:\n      - GME\n      - AMC\n      - NVDA\n      - AMD\n      - TSM\n      - MSFT\n      - AAPL\n      - BRK.A\n</code></pre> <p>The above configuration would result in something like this:</p> <p></p>"},{"location":"widgets/info/unifi_controller/","title":"Unifi Controller","text":"<p>(Find the Unifi Controller service widget here)</p> <p>You can display general connectivity status from your Unifi (Network) Controller.</p> <p>Warning</p> <p>When authenticating you will want to use a local account that has at least read privileges.</p> <p>An optional 'site' parameter can be supplied, if it is not the widget will use the default site for the controller.</p> <p>Hint</p> <p>If you enter e.g. incorrect credentials and receive an \"API Error\", you may need to recreate the container to clear the cache.</p> <p></p> <pre><code>- unifi_console:\n    url: https://unifi.host.or.ip:port\n    site: Site Name # optional\n    username: user\n    password: pass\n    key: unifiapikey # required if using API key instead of username/password\n</code></pre>"},{"location":"widgets/services/adguard-home/","title":"Adguard Home","text":"<p>Learn more about Adguard Home.</p> <p>The username and password are the same as used to login to the web interface.</p> <p>Allowed fields: <code>[\"queries\", \"blocked\", \"filtered\", \"latency\"]</code>.</p> <pre><code>widget:\n  type: adguard\n  url: http://adguard.host.or.ip\n  username: admin\n  password: password\n</code></pre>"},{"location":"widgets/services/apcups/","title":"APC UPS Monitoring","text":"<p>This widget extracts UPS information from an apcupsd daemon. Only works for APC/Schneider UPS products.</p> <p>[!NOTE] By default apcupsd daemon is bound to 127.0.0.1. Edit <code>/etc/apcupsd.conf</code> and change <code>NISIP</code> to an IP accessible from your homepage docker (usually your internal LAN interface).</p> <pre><code>widget:\n  type: apcups\n  url: tcp://your.acpupsd.host:3551\n</code></pre>"},{"location":"widgets/services/argocd/","title":"ArgoCD","text":"<p>Learn more about ArgoCD.</p> <p>Allowed fields (limited to a max of 4): <code>[\"apps\", \"synced\", \"outOfSync\", \"healthy\", \"progressing\", \"degraded\", \"suspended\", \"missing\"]</code></p> <pre><code>widget:\n  type: argocd\n  url: http://argocd.host.or.ip:port\n  key: argocdapikey\n</code></pre> <p>You can generate an API key either by creating a bearer token for an existing account, see Authorization (not recommended) or create a new local user account with limited privileges and generate an authentication token for this account. To do this the steps are:</p> <ul> <li>Create a new local user and give it the <code>apiKey</code> capability</li> <li>Setup RBAC configuration for your the user and give it readonly access to your ArgoCD resources, e.g. by giving it the <code>role:readonly</code> role.</li> <li>In your ArgoCD project under Settings / Accounts open the newly created account and in the Tokens section click on Generate New to generate an access token, optionally specifying an expiry date.</li> </ul> <p>If you installed ArgoCD via the official Helm chart, the account creation and rbac config can be achived by overriding these helm values:</p> <pre><code>configs:\n  cm:\n    accounts.readonly: apiKey\n  rbac:\n    policy.csv: \"g, readonly, role:readonly\"\n</code></pre> <p>This creates a new account called <code>readonly</code> and attaches the <code>role:readonly</code> role to it.</p>"},{"location":"widgets/services/atsumeru/","title":"Atsumeru","text":"<p>Learn more about Atsumeru.</p> <p>Define same username and password that is used for login from web or supported apps</p> <p>Allowed fields: <code>[\"series\", \"archives\", \"chapters\", \"categories\"]</code>.</p> <pre><code>widget:\n  type: atsumeru\n  url: http://atsumeru.host.or.ip:port\n  username: username\n  password: password\n</code></pre>"},{"location":"widgets/services/audiobookshelf/","title":"Audiobookshelf","text":"<p>Learn more about Audiobookshelf.</p> <p>You can find your API token by logging into the Audiobookshelf web app as an admin, go to the config \u2192 users page, and click on your account.</p> <p>Allowed fields: <code>[\"podcasts\", \"podcastsDuration\", \"books\", \"booksDuration\"]</code></p> <pre><code>widget:\n  type: audiobookshelf\n  url: http://audiobookshelf.host.or.ip:port\n  key: audiobookshelflapikey\n</code></pre>"},{"location":"widgets/services/authentik/","title":"Authentik","text":"<p>Learn more about Authentik.</p> <p>This widget reads the number of active users in the system, as well as logins for the last 24 hours.</p> <p>You will need to generate an API token for an existing user under <code>Admin Portal</code> &gt; <code>Directory</code> &gt; <code>Tokens &amp; App passwords</code>. Make sure to set Intent to \"API Token\".</p> <p>The account you made the API token for also needs the following Assigned global permissions in Authentik:</p> <ul> <li>authentik Core -&gt; Can view User (Model: User)</li> <li>authentik Events -&gt; Can view Event (Model: Event)</li> </ul> <p>Allowed fields: <code>[\"users\", \"loginsLast24H\", \"failedLoginsLast24H\"]</code>.</p> Authentik Version Homepage Widget Version &lt; 2025.8.0 1 (default) &gt;= 2025.8.0 2 <pre><code>widget:\n  type: authentik\n  url: http://authentik.host.or.ip:port\n  key: api_token\n  version: 2 # optional, default is 1\n</code></pre>"},{"location":"widgets/services/autobrr/","title":"Autobrr","text":"<p>Learn more about Autobrr.</p> <p>Find your API key under <code>Settings &gt; API Keys</code>.</p> <p>Allowed fields: <code>[\"approvedPushes\", \"rejectedPushes\", \"filters\", \"indexers\"]</code>.</p> <pre><code>widget:\n  type: autobrr\n  url: http://autobrr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"widgets/services/azuredevops/","title":"Azure DevOps","text":"<p>Learn more about Azure DevOps.</p> <p>This widget has 2 functions:</p> <ol> <li> <p>Pipelines: checks if the relevant pipeline is running or not, and if not, reports the last status.    Allowed fields: <code>[\"result\", \"status\"]</code>.</p> </li> <li> <p>Pull Requests: returns the amount of open PRs, the amount of the PRs you have open, and how many PRs that you open are marked as 'Approved' by at least 1 person and not yet completed.    Allowed fields: <code>[\"totalPrs\", \"myPrs\", \"approved\"]</code>.</p> </li> </ol> <p>You will need to generate a personal access token for an existing user, see the azure documentation</p> <pre><code>widget:\n  type: azuredevops\n  organization: myOrganization\n  project: myProject\n  definitionId: pipelineDefinitionId # required for pipelines\n  branchName: branchName # optional for pipelines, leave empty for all\n  userEmail: email # required for pull requests\n  repositoryId: prRepositoryId # required for pull requests\n  key: personalaccesstoken\n</code></pre>"},{"location":"widgets/services/backrest/","title":"Backrest","text":"<p>Backrest is a web-based frontend for the Restic backup tool.</p> <p>Allowed fields: <code>[\"num_success_latest\",\"num_failure_latest\",\"num_success_30\",\"num_plans\",\"num_failure_30\",\"bytes_added_30\"]</code></p> <pre><code>widget:\n  type: backrest\n  url: http://backrest.host.or.ip\n  username: admin # optional if auth is enabled in Backrest\n  password: admin # optional if auth is enabled in Backrest\n</code></pre>"},{"location":"widgets/services/bazarr/","title":"Bazarr","text":"<p>Learn more about Bazarr.</p> <p>Find your API key under <code>Settings &gt; General</code>.</p> <p>Allowed fields: <code>[\"missingEpisodes\", \"missingMovies\"]</code>.</p> <pre><code>widget:\n  type: bazarr\n  url: http://bazarr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"widgets/services/beszel/","title":"Beszel","text":"<p>Learn more about Beszel</p> <p>The widget has two modes, a single system with detailed info if <code>systemId</code> is provided, or an overview of all systems if <code>systemId</code> is not provided.</p> <p>The <code>systemID</code> is the <code>id</code> field on the collections page of Beszel under the PocketBase admin panel. You can also use the 'nice name' from the Beszel UI.</p> <p>A \"superuser\" is currently required to access the data from the Beszel API.</p> <p>Allowed fields for 'overview' mode: <code>[\"systems\", \"up\"]</code> Allowed fields for a single system: <code>[\"name\", \"status\", \"updated\", \"cpu\", \"memory\", \"disk\", \"network\"]</code></p> Beszel Version Homepage Widget Version &lt; 0.9.0 1 (default) &gt;= 0.9.0 2 <pre><code>widget:\n  type: beszel\n  url: http://beszel.host.or.ip\n  username: username # email\n  password: password\n  systemId: systemId # optional\n  version: 2 # optional, default is 1\n</code></pre>"},{"location":"widgets/services/caddy/","title":"Caddy","text":"<p>Learn more about Caddy.</p> <p>Allowed fields: <code>[\"upstreams\", \"requests\", \"requests_failed\"]</code>.</p> <pre><code>widget:\n  type: caddy\n  url: http://caddy.host.or.ip:adminport # default admin port is 2019\n</code></pre>"},{"location":"widgets/services/calendar/","title":"Calendar","text":""},{"location":"widgets/services/calendar/#monthly-view","title":"Monthly view","text":"<p>This widget shows monthly calendar, with optional integrations to show events from supported widgets.</p> <pre><code>widget:\n  type: calendar\n  firstDayInWeek: sunday # optional - defaults to monday\n  view: monthly # optional - possible values monthly, agenda\n  maxEvents: 10 # optional - defaults to 10\n  showTime: true # optional - show time for event happening today - defaults to false\n  timezone: America/Los_Angeles # optional and only when timezone is not detected properly (slightly slower performance) - force timezone for ical events (if it's the same - no change, if missing or different in ical - will be converted to this timezone)\n  integrations: # optional\n    - type: sonarr # active widget type that is currently enabled on homepage - possible values: radarr, sonarr, lidarr, readarr, ical\n      service_group: Media # group name where widget exists\n      service_name: Sonarr # service name for that widget\n      color: teal # optional - defaults to pre-defined color for the service (teal for sonarr)\n      baseUrl: https://sonarr.domain.url # optional - adds links to sonarr/radarr pages\n      params: # optional - additional params for the service\n        unmonitored: true # optional - defaults to false, used with *arr stack\n    - type: ical # Show calendar events from another service\n      url: https://domain.url/with/link/to.ics # URL with calendar events\n      name: My Events # required - name for these calendar events\n      color: zinc # optional - defaults to pre-defined color for the service (zinc for ical)\n      params: # optional - additional params for the service\n        showName: true # optional - show name before event title in event line - defaults to false\n</code></pre>"},{"location":"widgets/services/calendar/#agenda","title":"Agenda","text":"<p>This view shows only list of events from configured integrations</p> <pre><code>widget:\n  type: calendar\n  view: agenda\n  maxEvents: 10 # optional - defaults to 10\n  showTime: true # optional - show time for event happening today - defaults to false\n  previousDays: 3 # optional - shows events since three days ago - defaults to 0\n  integrations: # same as in Monthly view example\n</code></pre>"},{"location":"widgets/services/calendar/#integrations","title":"Integrations","text":"<p>Currently integrated widgets are sonarr, radarr, lidarr and readarr.</p> <p>Supported colors can be found on color palette.</p>"},{"location":"widgets/services/calendar/#ical","title":"iCal","text":"<p>This custom integration allows you to show events from any calendar that supports iCal format, for example, Google Calendar (go to <code>Settings</code>, select specific calendar, go to <code>Integrate calendar</code>, copy URL from <code>Public Address in iCal format</code>).</p>"},{"location":"widgets/services/calibre-web/","title":"Calibre-web","text":"<p>Learn more about Calibre-web.</p> <p>Note: widget requires calibre-web \u2265 v0.6.21.</p> <p>Allowed fields: <code>[\"books\", \"authors\", \"categories\", \"series\"]</code>.</p> <pre><code>widget:\n  type: calibreweb\n  url: http://your.calibreweb.host:port\n  username: username\n  password: password\n</code></pre>"},{"location":"widgets/services/changedetectionio/","title":"Changedetection.io","text":"<p>Learn more about Changedetection.io.</p> <p>Find your API key under <code>Settings &gt; API</code>.</p> <p>Allowed fields: <code>[\"diffsDetected\", \"totalObserved\"]</code>.</p> <pre><code>widget:\n  type: changedetectionio\n  url: http://changedetection.host.or.ip:port\n  key: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"widgets/services/channelsdvrserver/","title":"Channels DVR Server","text":"<p>Learn more about Channels DVR Server.</p> <pre><code>widget:\n  type: channelsdvrserver\n  url: http://server.host.or.ip:port\n</code></pre>"},{"location":"widgets/services/checkmk/","title":"Checkmk","text":"<p>Learn more about Checkmk.</p> <p>To setup authentication, follow the official Checkmk API documentation.</p> <pre><code>widget:\n  type: checkmk\n  url: http://checkmk.host.or.ip:port\n  site: your-site-name-cla-by-default\n  username: username\n  password: password\n</code></pre>"},{"location":"widgets/services/cloudflared/","title":"Cloudflare Tunnels","text":"<p>Learn more about Cloudflare Tunnels.</p> <p>As of v0.6.10 this widget no longer accepts a Cloudflare global API key (or account email) due to security concerns. Instead, you should setup an API token which only requires the permissions <code>Account.Cloudflare Tunnel:Read</code>.</p> <p>Allowed fields: <code>[\"status\", \"origin_ip\"]</code>.</p> <pre><code>widget:\n  type: cloudflared\n  accountid: accountid # from zero trust dashboard url e.g. https://one.dash.cloudflare.com/&lt;accountid&gt;/home/quick-start\n  tunnelid: tunnelid # found in tunnels dashboard under the tunnel name\n  key: cloudflareapitoken # api token with `Account.Cloudflare Tunnel:Read` https://dash.cloudflare.com/profile/api-tokens\n</code></pre>"},{"location":"widgets/services/coin-market-cap/","title":"Coin Market Cap","text":"<p>Learn more about Coin Market Cap.</p> <p>Get your API key from your CoinMarketCap Pro Dashboard.</p> <p>Allowed fields: no configurable fields for this widget.</p> <pre><code>widget:\n  type: coinmarketcap\n  currency: GBP # Optional\n  symbols: [BTC, LTC, ETH]\n  key: apikeyapikeyapikeyapikeyapikey\n  defaultinterval: 7d # Optional\n</code></pre> <p>You can also specify slugs instead of symbols (since symbols aren't guaranteed to be unique). If you supply both, slugs will be used. For example:</p> <pre><code>widget:\n  type: coinmarketcap\n  slugs: [chia-network, uniswap]\n  key: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"widgets/services/crowdsec/","title":"Crowdsec","text":"<p>Learn more about Crowdsec.</p> <p>See the crowdsec docs for information about registering a machine, in most instances you can use the default credentials (<code>/etc/crowdsec/local_api_credentials.yaml</code>).</p> <p>Allowed fields: <code>[\"alerts\", \"bans\"]</code>.</p> <pre><code>widget:\n  type: crowdsec\n  url: http://crowdsechostorip:port\n  username: localhost # machine_id in crowdsec\n  password: password\n</code></pre>"},{"location":"widgets/services/customapi/","title":"Custom API","text":"<p>This widget can show information from custom self-hosted or third party API.</p> <p>Fields need to be defined in the <code>mappings</code> section YAML object to correlate with the value in the APIs JSON object. Final field definition needs to be the key with the desired value information.</p> <pre><code>widget:\n  type: customapi\n  url: http://custom.api.host.or.ip:port/path/to/exact/api/endpoint\n  refreshInterval: 10000 # optional - in milliseconds, defaults to 10s\n  username: username # auth - optional\n  password: password # auth - optional\n  method: GET # optional, e.g. POST\n  headers: # optional, must be object, see below\n  requestBody: # optional, can be string or object, see below\n  display: # optional, default to block, see below\n  mappings:\n    - field: key\n      label: Field 1\n      format: text # optional - defaults to text\n    - field: path.to.key2\n      format: number # optional - defaults to text\n      label: Field 2\n    - field: path.to.another.key3\n      label: Field 3\n      format: percent # optional - defaults to text\n    - field: key\n      label: Field 4\n      format: date # optional - defaults to text\n      locale: nl # optional\n      dateStyle: long # optional - defaults to \"long\". Allowed values: `[\"full\", \"long\", \"medium\", \"short\"]`.\n      timeStyle: medium # optional - Allowed values: `[\"full\", \"long\", \"medium\", \"short\"]`.\n    - field: key\n      label: Field 5\n      format: relativeDate # optional - defaults to text\n      locale: nl # optional\n      style: short # optional - defaults to \"long\". Allowed values: `[\"long\", \"short\", \"narrow\"]`.\n      numeric: auto # optional - defaults to \"always\". Allowed values `[\"always\", \"auto\"]`.\n    - field: key\n      label: Field 6\n      format: text\n      additionalField: # optional\n        field: hourly.time.key\n        color: theme # optional - defaults to \"\". Allowed values: `[\"theme\", \"adaptive\", \"black\", \"white\"]`.\n        format: date # optional\n    - field: key\n      label: Number of things in array\n      format: size\n    # This (no field) will take the root of the API response, e.g. when APIs return an array:\n    - label: Number of items\n      format: size\n</code></pre> <p>Supported formats for the values are <code>text</code>, <code>number</code>, <code>float</code>, <code>percent</code>, <code>duration</code>, <code>bytes</code>, <code>bitrate</code>, <code>size</code>, <code>date</code> and <code>relativeDate</code>.</p> <p>The <code>dateStyle</code> and <code>timeStyle</code> options of the <code>date</code> format are passed directly to Intl.DateTimeFormat and the <code>style</code> and <code>numeric</code> options of <code>relativeDate</code> are passed to Intl.RelativeTimeFormat.</p> <p>The <code>duration</code> format expects the duration to be specified in seconds. The <code>scale</code> transformation tool can be used if a conversion is required.</p> <p>The <code>size</code> format will return the length of the array or string, or the number of keys in an object. This is then formatted as <code>number</code>.</p>"},{"location":"widgets/services/customapi/#example","title":"Example","text":"<p>For the following JSON object from the API:</p> <pre><code>{\n  \"id\": 1,\n  \"name\": \"Rick Sanchez\",\n  \"status\": \"Alive\",\n  \"species\": \"Human\",\n  \"gender\": \"Male\",\n  \"origin\": {\n    \"name\": \"Earth (C-137)\"\n  },\n  \"locations\": [\n    {\n      \"name\": \"Earth (C-137)\"\n    },\n    {\n      \"name\": \"Citadel of Ricks\"\n    }\n  ]\n}\n</code></pre> <p>Define the <code>mappings</code> section as an array, for example:</p> <pre><code>mappings:\n  - field: name # Rick Sanchez\n    label: Name\n  - field: status # Alive\n    label: Status\n  - field: origin.name # Earth (C-137)\n    label: Origin\n  - field: locations.1.name # Citadel of Ricks\n    label: Location\n</code></pre> <p>Note that older versions of the widget accepted fields as a yaml object, which is still supported. E.g.:</p> <pre><code>mappings:\n  - field:\n      locations:\n        1: name # Citadel of Ricks\n    label: Location\n</code></pre>"},{"location":"widgets/services/customapi/#data-transformation","title":"Data Transformation","text":"<p>You can manipulate data with the following tools <code>remap</code>, <code>scale</code>, <code>prefix</code> and <code>suffix</code>, for example:</p> <pre><code>- field: key4\n  label: Field 4\n  format: text\n  remap:\n    - value: 0\n      to: None\n    - value: 1\n      to: Connected\n    - any: true # will map all other values\n      to: Unknown\n- field: key5\n  label: Power\n  format: float\n  scale: 0.001 # can be number or string e.g. 1/16\n  suffix: \"kW\"\n- field: key6\n  label: Price\n  format: float\n  prefix: \"$\"\n</code></pre>"},{"location":"widgets/services/customapi/#display-options","title":"Display Options","text":"<p>The widget supports different display modes that can be set using the <code>display</code> property.</p>"},{"location":"widgets/services/customapi/#block-view-default","title":"Block View (Default)","text":"<p>The default display mode is <code>block</code>, which shows fields in a block format.</p>"},{"location":"widgets/services/customapi/#list-view","title":"List View","text":"<p>You can change the default block view to a list view by setting the <code>display</code> option to <code>list</code>.</p> <p>The list view can optionally display an additional field next to the primary field.</p> <p><code>additionalField</code>: Similar to <code>field</code>, but only used in list view. Displays additional information for the mapping object on the right.</p> <p><code>field</code>: Defined the same way as other custom api widget fields.</p> <p><code>color</code>: Allowed options: <code>\"theme\", \"adaptive\", \"black\", \"white\"</code>. The option <code>adaptive</code> will apply a color using the value of the <code>additionalField</code>, green for positive numbers, red for negative numbers.</p> <pre><code>- field: key\n  label: Field\n  format: text\n  remap:\n    - value: 0\n      to: None\n    - value: 1\n      to: Connected\n    - any: true # will map all other values\n      to: Unknown\n  additionalField:\n    field: hourly.time.key\n    color: theme\n    format: date\n</code></pre>"},{"location":"widgets/services/customapi/#dynamic-list-view","title":"Dynamic List View","text":"<p>To display a list of items from an array in the API response, set the <code>display</code> property to <code>dynamic-list</code> and configure the <code>mappings</code> object with the following properties:</p> <pre><code>widget:\n  type: customapi\n  url: https://example.com/api/servers\n  display: dynamic-list\n  mappings:\n    items: data # optional, the path to the array in the API response. Omit this option if the array is at the root level\n    name: id # required, field in each item to use as the item name (left side)\n    label: ip_address # required, field in each item to use as the item label (right side)\n    limit: 5 # optional, limit the number of items to display\n    format: text # optional - format of the label field\n    target: https://example.com/server/{id} # optional, makes items clickable with template support\n</code></pre> <p>This configuration would work with an API that returns a response like:</p> <pre><code>{\n  \"data\": [\n    { \"id\": \"server1\", \"name\": \"Server 1\", \"ip_address\": \"192.168.0.1\" },\n    { \"id\": \"server2\", \"name\": \"Server 2\", \"ip_address\": \"192.168.0.2\" }\n  ]\n}\n</code></pre> <p>The widget would display a list with two items:</p> <ul> <li>\"Server 1\" on the left and \"192.168.0.1\" on the right, clickable to \"https://example.com/server/server1\"</li> <li>\"Server 2\" on the left and \"192.168.0.2\" on the right, clickable to \"https://example.com/server/server2\"</li> </ul> <p>For nested fields in the items, you can use dot notation:</p> <pre><code>mappings:\n  items: data.results.servers\n  name: details.id\n  label: details.name\n</code></pre>"},{"location":"widgets/services/customapi/#custom-headers","title":"Custom Headers","text":"<p>Pass custom headers using the <code>headers</code> option, for example:</p> <pre><code>headers:\n  X-API-Token: token\n</code></pre>"},{"location":"widgets/services/customapi/#custom-request-body","title":"Custom Request Body","text":"<p>Pass custom request body using the <code>requestBody</code> option in either a string or object format. Objects will automatically be converted to a JSON string.</p> <pre><code>requestBody:\n  foo: bar\n# or\nrequestBody: \"{\\\"foo\\\":\\\"bar\\\"}\"\n</code></pre> <p>Both formats result in <code>{\"foo\":\"bar\"}</code> being sent as the request body. Don't forget to set your <code>Content-Type</code> headers!</p>"},{"location":"widgets/services/deluge/","title":"Deluge","text":"<p>Learn more about Deluge.</p> <p>Uses the same password used to login to the webui, see the deluge FAQ.</p> <p>Allowed fields: <code>[\"leech\", \"download\", \"seed\", \"upload\"]</code>.</p> <pre><code>widget:\n  type: deluge\n  url: http://deluge.host.or.ip\n  password: password # webui password\n  enableLeechProgress: true # optional, defaults to false\n</code></pre>"},{"location":"widgets/services/develancacheui/","title":"DeveLanCacheUI","text":"<p>Learn more about DeveLanCacheUI.</p> <pre><code>widget:\n  type: develancacheui\n  url: http://your.develancacheui_backend.host:port\n</code></pre> <p>The url should point to the DeveLanCacheUI Backend (API)</p>"},{"location":"widgets/services/diskstation/","title":"Synology Disk Station","text":"<p>Learn more about Synology Disk Station.</p> <p>Note: the widget is not compatible with 2FA.</p> <p>An optional 'volume' parameter can be supplied to specify which volume's free space to display when more than one volume exists. The value of the parameter must be in form of <code>volume_N</code>, e.g. to display free space for volume2, <code>volume_2</code> should be set as 'volume' value. If omitted, first returned volume's free space will be shown (not guaranteed to be volume1).</p> <p>Allowed fields: <code>[\"uptime\", \"volumeAvailable\", \"resources.cpu\", \"resources.mem\"]</code>.</p> <p>To access these system metrics you need to connect to the DiskStation (<code>DSM</code>) with an account that is a member of the default <code>Administrators</code> group. That is because these metrics are requested from the API's <code>SYNO.Core.System</code> part that is only available to admin users. In order to keep the security impact as small as possible we can set the account in DSM up to limit the user's permissions inside the Synology system. In DSM 7.x, for instance, follow these steps:</p> <ol> <li>Create a new user, i.e. <code>remote_stats</code>.</li> <li>Set up a strong password for the new user</li> <li>Under the <code>User Groups</code> tab of the user config dialogue check the box for <code>Administrators</code>.</li> <li>On the <code>Permissions</code> tab check the top box for <code>No Access</code>, effectively prohibiting the user from accessing anything in the shared folders.</li> <li>Under <code>Applications</code> check the box next to <code>Deny</code> in the header to explicitly prohibit login to all applications.</li> <li>Now only allow login to the <code>DSM</code> and <code>Download Station</code> applications, either by</li> <li>unchecking <code>Deny</code> in the respective row, or (if inheriting permission doesn't work because of other group settings)</li> <li>checking <code>Allow</code> for this app, or</li> <li>checking <code>By IP</code> for this app to limit the source of login attempts to one or more IP addresses/subnets.</li> <li>When the <code>Preview</code> column shows <code>Allow</code> in the <code>DSM</code> row, click <code>Save</code>.</li> </ol> <p>Now configure the widget with the correct login information and test it.</p> <p>If you encounter issues during testing:</p> <ol> <li>Make sure to uncheck the option for automatic blocking due to invalid logins under <code>Control Panel &gt; Security &gt; Protection</code>.</li> <li>If desired, this setting can be reactivated once the login is established working.</li> <li>Login to your Synology DSM with the newly created account and accept terms and conditions.</li> <li>Reattempt</li> </ol> <pre><code>widget:\n  type: diskstation\n  url: http://diskstation.host.or.ip:port\n  username: username\n  password: password\n  volume: volume_N # optional\n</code></pre>"},{"location":"widgets/services/downloadstation/","title":"Synology Download Station","text":"<p>Learn more about Synology Download Station.</p> <p>Note: the widget is not compatible with 2FA.</p> <p>Allowed fields: <code>[\"leech\", \"download\", \"seed\", \"upload\"]</code>.</p> <pre><code>widget:\n  type: downloadstation\n  url: http://downloadstation.host.or.ip:port\n  username: username\n  password: password\n</code></pre>"},{"location":"widgets/services/emby/","title":"Emby","text":"<p>Learn more about Emby.</p> <p>You can create an API key from inside Emby at <code>Settings &gt; Advanced &gt; Api Keys</code>.</p> <p>As of v0.6.11 the widget supports fields <code>[\"movies\", \"series\", \"episodes\", \"songs\"]</code>. These blocks are disabled by default but can be enabled with the <code>enableBlocks</code> option, and the \"Now Playing\" feature (enabled by default) can be disabled with the <code>enableNowPlaying</code> option.</p> <pre><code>widget:\n  type: emby\n  url: http://emby.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n  enableBlocks: true # optional, defaults to false\n  enableNowPlaying: true # optional, defaults to true\n  enableUser: true # optional, defaults to false\n  enableMediaControl: false # optional, defaults to true\n  showEpisodeNumber: true # optional, defaults to false\n  expandOneStreamToTwoRows: false # optional, defaults to true\n</code></pre>"},{"location":"widgets/services/esphome/","title":"ESPHome","text":"<p>Learn more about ESPHome.</p> <p>Show the number of ESPHome devices based on their state.</p> <p>Allowed fields: <code>[\"total\", \"online\", \"offline\", \"offline_alt\", \"unknown\"]</code> (maximum of 4).</p> <p>By default ESPHome will only mark devices as <code>offline</code> if their address cannot be pinged. If it has an invalid config or its name cannot be resolved (by DNS) its status will be marked as <code>unknown</code>. To group both <code>offline</code> and <code>unknown</code> devices together, users should use the <code>offline_alt</code> field instead. This sums all devices that are not online together.</p> <pre><code>widget:\n  type: esphome\n  url: http://esphome.host.or.ip:port\n  username: myesphomeuser # only if auth enabled\n  password: myesphomepass # only if auth enabled\n</code></pre>"},{"location":"widgets/services/evcc/","title":"EVCC","text":"<p>Learn more about EVCC.</p> <p>Allowed fields: <code>[\"pv_power\", \"grid_power\", \"home_power\", \"charge_power]</code>.</p> <pre><code>widget:\n  type: evcc\n  url: http://evcc.host.or.ip:port\n</code></pre>"},{"location":"widgets/services/filebrowser/","title":"Filebrowser","text":"<p>Learn more about Filebrowser.</p> <p>If you are using Proxy header authentication you have to set <code>authHeader</code> and <code>username</code>.</p> <p>Allowed fields: <code>[\"available\", \"used\", \"total\"]</code>.</p> <pre><code>widget:\n  type: filebrowser\n  url: http://filebrowserhostorip:port\n  username: username\n  password: password\n  authHeader: X-My-Header # If using Proxy header authentication\n</code></pre>"},{"location":"widgets/services/fileflows/","title":"Fileflows","text":"<p>Learn more about FileFlows.</p> <p>Allowed fields: <code>[\"queue\", \"processing\", \"processed\", \"time\"]</code>.</p> <pre><code>widget:\n  type: fileflows\n  url: http://your.fileflows.host:port\n</code></pre>"},{"location":"widgets/services/firefly/","title":"Firefly III","text":"<p>Learn more about Firefly III.</p> <p>Find your API key under <code>Options &gt; Profile &gt; OAuth &gt; Personal Access Tokens</code>.</p> <p>Allowed fields: <code>[\"networth\" ,\"budget\"]</code>.</p> <pre><code>widget:\n  type: firefly\n  url: https://firefly.host.or.ip\n  key: personalaccesstoken.personalaccesstoken.personalaccesstoken\n</code></pre>"},{"location":"widgets/services/flood/","title":"Flood","text":"<p>Learn more about Flood.</p> <p>Allowed fields: <code>[\"leech\", \"download\", \"seed\", \"upload\"]</code>.</p> <pre><code>widget:\n  type: flood\n  url: http://flood.host.or.ip\n  username: username # if set\n  password: password # if set\n</code></pre>"},{"location":"widgets/services/freshrss/","title":"FreshRSS","text":"<p>Learn more about FreshRSS.</p> <p>Please refer to Enable the API in FreshRSS for the \"API password\" to be entered in the password field.</p> <p>Allowed fields: <code>[\"subscriptions\", \"unread\"]</code>.</p> <pre><code>widget:\n  type: freshrss\n  url: http://freshrss.host.or.ip:port\n  username: username\n  password: password\n</code></pre>"},{"location":"widgets/services/frigate/","title":"Frigate","text":"<p>Learn more about Frigate.</p> <p>Allowed fields: <code>[\"cameras\", \"uptime\", \"version\"]</code>.</p> <p>A recent event listing is disabled by default, but can be enabled with the <code>enableRecentEvents</code> option.</p> <pre><code>widget:\n  type: frigate\n  url: http://frigate.host.or.ip:port\n  enableRecentEvents: true # Optional, defaults to false\n</code></pre>"},{"location":"widgets/services/fritzbox/","title":"FRITZ!Box","text":"<p>Application access &amp; UPnP must be activated on your device:</p> <pre><code>Home Network &gt; Network &gt; Network Settings &gt; Access Settings in the Home Network\n[x] Allow access for applications\n[x] Transmit status information over UPnP\n</code></pre> <p>Credentials are not needed and, as such, you may want to consider using <code>http</code> instead of <code>https</code> as those requests are significantly faster.</p> <p>Allowed fields (limited to a max of 4): <code>[\"connectionStatus\", \"uptime\", \"maxDown\", \"maxUp\", \"down\", \"up\", \"received\", \"sent\", \"externalIPAddress\", \"externalIPv6Address\", \"externalIPv6Prefix\"]</code>.</p> <pre><code>widget:\n  type: fritzbox\n  url: http://192.168.178.1\n</code></pre>"},{"location":"widgets/services/gamedig/","title":"GameDig","text":"<p>Learn more about GameDig.</p> <p>Uses the GameDig library to get game server information for any supported server type.</p> <p>Allowed fields (limited to a max of 4): <code>[\"status\", \"name\", \"map\", \"currentPlayers\", \"players\", \"maxPlayers\", \"bots\", \"ping\"]</code>.</p> <pre><code>widget:\n  type: gamedig\n  serverType: csgo # see https://github.com/gamedig/node-gamedig#games-list\n  url: udp://server.host.or.ip:port\n  gameToken: # optional, a token used by gamedig with certain games\n</code></pre>"},{"location":"widgets/services/gatus/","title":"Gatus","text":"<p>Allowed fields: <code>[\"up\", \"down\", \"uptime\"]</code>.</p> <pre><code>widget:\n  type: gatus\n  url: http://gatus.host.or.ip:port\n</code></pre>"},{"location":"widgets/services/ghostfolio/","title":"Ghostfolio","text":"<p>Learn more about Ghostfolio.</p> <p>Authentication requires manually obtaining a Bearer token which can be obtained by make a POST request to the API e.g.</p> <pre><code>curl -X POST http://localhost:3333/api/v1/auth/anonymous -H 'Content-Type: application/json' -d '{ \"accessToken\": \"SECURITY_TOKEN_OF_ACCOUNT\" }'\n</code></pre> <p>See the official docs.</p> <p>Note that the Bearer token is valid for 6 months, after which a new one must be generated.</p> <p>Allowed fields: <code>[\"gross_percent_today\", \"gross_percent_1y\", \"gross_percent_max\"]</code></p> <pre><code>widget:\n  type: ghostfolio\n  url: http://ghostfoliohost:port\n  key: ghostfoliobearertoken\n</code></pre>"},{"location":"widgets/services/gitea/","title":"Gitea","text":"<p>Learn more about Gitea.</p> <p>API token requires <code>notifications</code>, <code>repository</code> and <code>issue</code> permissions. See the gitea documentation for details on generating tokens.</p> <p>Allowed fields: <code>[\"repositories\", \"notifications\", \"issues\", \"pulls\"]</code>.</p> <pre><code>widget:\n  type: gitea\n  url: http://gitea.host.or.ip:port\n  key: giteaapitoken\n</code></pre>"},{"location":"widgets/services/gitlab/","title":"Gitlab","text":"<p>Learn more about Gitlab.</p> <p>API requires a personal access token with either <code>read_api</code> or <code>api</code> permission. See the gitlab documentation for details on generating one.</p> <p>Your Gitlab user ID can be found on your profile page.</p> <p>Allowed fields: <code>[\"events\", \"issues\", \"merges\", \"projects\"]</code>.</p> <pre><code>widget:\n  type: gitlab\n  url: http://gitlab.host.or.ip:port\n  key: personal-access-token\n  user_id: 123456\n</code></pre>"},{"location":"widgets/services/glances/","title":"Glances","text":"<p>Learn more about Glances.</p> <p></p> <p>(Find the Glances information widget here)</p> <p>The Glances widget allows you to monitor the resources (cpu, memory, diskio, sensors &amp; processes) of host or another machine. You can have multiple instances by adding another service block.</p> <pre><code>widget:\n  type: glances\n  url: http://glances.host.or.ip:port\n  username: user # optional if auth enabled in Glances\n  password: pass # optional if auth enabled in Glances\n  version: 4 # required only if running glances v4 or higher, defaults to 3\n  metric: cpu\n  diskUnits: bytes # optional, bytes (default) or bbytes. Only applies to disk\n  refreshInterval: 5000 # optional - in milliseconds, defaults to 1000 or more, depending on the metric\n  pointsLimit: 15 # optional, defaults to 15\n</code></pre> <p>Please note, this widget does not need an <code>href</code>, <code>icon</code> or <code>description</code> on its parent service. To achieve the same effect as the examples above, see as an example:</p> <pre><code>- CPU Usage:\n    widget:\n      type: glances\n      url: http://glances.host.or.ip:port\n      metric: cpu\n- Network Usage:\n    widget:\n      type: glances\n      url: http://glances.host.or.ip:port\n      metric: network:enp0s25\n</code></pre>"},{"location":"widgets/services/glances/#metrics","title":"Metrics","text":"<p>The metric field in the configuration determines the type of system monitoring data to be displayed. Here are the supported metrics:</p> <p><code>info</code>: System information. Shows the system's hostname, OS, kernel version, CPU type, CPU usage, RAM usage and SWAP usage.</p> <p><code>cpu</code>: CPU usage. Shows how much of the system's computational resources are currently being used.</p> <p><code>memory</code>: Memory usage. Shows how much of the system's RAM is currently being used.</p> <p><code>process</code>: Top 5 processes based on CPU usage. Gives an overview of which processes are consuming the most resources.</p> <p><code>containers</code>: Docker or Kubernetes containers list. Shows up to 5 containers running on the system and their resource usage.</p> <p><code>network:&lt;interface_name&gt;</code>: Network data usage for the specified interface. Replace <code>&lt;interface_name&gt;</code> with the name of your network interface, e.g., <code>network:enp0s25</code>, as specified in glances.</p> <p><code>sensor:&lt;sensor_id&gt;</code>: Temperature of the specified sensor, typically used to monitor CPU temperature. Replace <code>&lt;sensor_id&gt;</code> with the name of your sensor, e.g., <code>sensor:Package id 0</code> as specified in glances.</p> <p><code>disk:&lt;disk_id&gt;</code>: Disk I/O data for the specified disk. Replace <code>&lt;disk_id&gt;</code> with the id of your disk, e.g., <code>disk:sdb</code>, as specified in glances.</p> <p><code>gpu:&lt;gpu_id&gt;</code>: GPU usage for the specified GPU. Replace <code>&lt;gpu_id&gt;</code> with the id of your GPU, e.g., <code>gpu:0</code>, as specified in glances.</p> <p><code>fs:&lt;mnt_point&gt;</code>: Disk usage for the specified mount point. Replace <code>&lt;mnt_point&gt;</code> with the path of your disk, e.g., <code>/mnt/storage</code>, as specified in glances.</p>"},{"location":"widgets/services/glances/#views","title":"Views","text":"<p>All widgets offer an alternative to the full or \"graph\" view, which is the compact, or \"graphless\" view.</p> <p></p> <p>To switch to the alternative \"graphless\" view, simply pass <code>chart: false</code> as an option to the widget, like so:</p> <pre><code>- Network Usage:\n    widget:\n      type: glances\n      url: http://glances.host.or.ip:port\n      metric: network:enp0s25\n      chart: false\n</code></pre>"},{"location":"widgets/services/gluetun/","title":"Gluetun","text":"<p>Learn more about Gluetun.</p> <p>Note</p> <p>Requires HTTP control server options to be enabled. By default this runs on port <code>8000</code>.</p> <p>Allowed fields: <code>[\"public_ip\", \"region\", \"country\", \"port_forwarded\"]</code>. Default fields: <code>[\"public_ip\", \"region\", \"country\"]</code>.</p> <p>To setup authentication, follow the official Gluetun documentation. Note that to use the api key method, you must add the route <code>GET /v1/publicip/ip</code> to the <code>routes</code> array in your Gluetun config.toml. Similarly, if you want to include the <code>port_forwarded</code> field, you must add the route <code>GET /v1/openvpn/portforwarded</code> to your Gluetun config.toml.</p> <pre><code>widget:\n  type: gluetun\n  url: http://gluetun.host.or.ip:port\n  key: gluetunkey # Not required if /v1/publicip/ip endpoint is configured with `auth = none`\n</code></pre>"},{"location":"widgets/services/gotify/","title":"Gotify","text":"<p>Learn more about Gotify.</p> <p>Get a Gotify client token from an existing client or create a new one on your Gotify admin page.</p> <p>Allowed fields: <code>[\"apps\", \"clients\", \"messages\"]</code>.</p> <pre><code>widget:\n  type: gotify\n  url: http://gotify.host.or.ip\n  key: clientoken\n</code></pre>"},{"location":"widgets/services/grafana/","title":"Grafana","text":"<p>Learn more about Grafana.</p> Grafana Version Homepage Widget Version &lt;= v10.4 1 (default) &gt; v10.4 2 <p>Allowed fields: <code>[\"dashboards\", \"datasources\", \"totalalerts\", \"alertstriggered\"]</code>.</p> <pre><code>widget:\n  type: grafana\n  version: 2 # optional, default is 1\n  alerts: alertmanager # optional, default is grafana\n  url: http://grafana.host.or.ip:port\n  username: username\n  password: password\n</code></pre>"},{"location":"widgets/services/hdhomerun/","title":"HDHomerun","text":"<p>Learn more about HDHomerun.</p> <p>Allowed fields: <code>[\"channels\", \"hd\", \"tunerCount\", \"channelNumber\", \"channelNetwork\", \"signalStrength\", \"signalQuality\", \"symbolQuality\", \"networkRate\", \"clientIP\" ]</code>.</p> <p>If more than 4 fields are provided, only the first 4 are displayed.</p> <pre><code>widget:\n  type: hdhomerun\n  url: http://hdhomerun.host.or.ip\n  tuner: 0 # optional - defaults to 0, used for tuner-specific fields\n  fields: [\"channels\", \"hd\"] # optional - default fields shown\n</code></pre>"},{"location":"widgets/services/headscale/","title":"Headscale","text":"<p>Learn more about Headscale.</p> <p>You will need to generate an API access token from the command line using <code>headscale apikeys create</code> command.</p> <p>To find your node ID, you can use <code>headscale nodes list</code> command.</p> <p>Allowed fields: <code>[\"name\", \"address\", \"last_seen\", \"status\"]</code>.</p> <pre><code>widget:\n  type: headscale\n  url: http://headscale.host.or.ip:port\n  nodeId: nodeid\n  key: headscaleapiaccesstoken\n</code></pre>"},{"location":"widgets/services/healthchecks/","title":"Health checks","text":"<p>Learn more about Health Checks.</p> <p>Specify a single check by including the <code>uuid</code> field or show the total 'up' and 'down' for all checks by leaving off the <code>uuid</code> field.</p> <p>To use the Health Checks widget, you first need to generate an API key.</p> <ol> <li>In your project, go to project Settings on the navigation bar.</li> <li>Click on API key (read-only) and then click Create.</li> <li>Copy the API key that is generated for you.</li> </ol> <p>Allowed fields: <code>[\"status\", \"last_ping\"]</code> for single checks, <code>[\"up\", \"down\"]</code> for total stats.</p> <pre><code>widget:\n  type: healthchecks\n  url: http://healthchecks.host.or.ip:port\n  key: &lt;YOUR_API_KEY&gt;\n  uuid: &lt;CHECK_UUID&gt; # optional, if not included total statistics for all checks is shown\n</code></pre>"},{"location":"widgets/services/homeassistant/","title":"Home Assistant","text":"<p>Learn more about Home Assistant.</p> <p>You will need to generate a long-lived access token for an existing Home Assistant user in its profile.</p> <p>Allowed fields: <code>[\"people_home\", \"lights_on\", \"switches_on\"]</code>.</p> <p>Up to a maximum of four custom states and/or templates can be queried via the <code>custom</code> property like in the example below. The <code>custom</code> property will have no effect as long as the <code>fields</code> property is defined.</p> <ul> <li><code>state</code> will query the state of the specified <code>entity_id</code></li> <li>state labels and values can be user defined and may reference entity attributes in curly brackets</li> <li>if no state label is defined it will default to <code>\"{attributes.friendly_name}\"</code></li> <li>if no state value is defined it will default to <code>\"{state} {attributes.unit_of_measurement}\"</code></li> <li><code>template</code> will query the specified template, see Home Assistant Templating</li> <li>if no template label is defined it will be empty</li> </ul> <pre><code>widget:\n  type: homeassistant\n  url: http://homeassistant.host.or.ip:port\n  key: access_token\n  custom:\n    - state: sensor.total_power\n    - state: sensor.total_energy_today\n      label: energy today\n    - template: \"{{ states.switch|selectattr('state','equalto','on')|list|length }}\"\n      label: switches on\n    - state: weather.forecast_home\n      label: wind speed\n      value: \"{attributes.wind_speed} {attributes.wind_speed_unit}\"\n</code></pre>"},{"location":"widgets/services/homebox/","title":"Homebox","text":"<p>Learn more about Homebox.</p> <p>Uses the same username and password used to login from the web.</p> <p>The <code>totalValue</code> field will attempt to format using the currency you have configured in Homebox.</p> <p>Allowed fields: <code>[\"items\", \"totalWithWarranty\", \"locations\", \"labels\", \"users\", \"totalValue\"]</code>.</p> <p>If more than 4 fields are provided, only the first 4 are displayed.</p> <pre><code>widget:\n  type: homebox\n  url: http://homebox.host.or.ip:port\n  username: username\n  password: password\n  fields: [\"items\", \"locations\", \"totalValue\"] # optional - default fields shown\n</code></pre>"},{"location":"widgets/services/homebridge/","title":"Homebridge","text":"<p>Learn more about Homebridge.</p> <p>The Homebridge API is actually provided by the Config UI X plugin that has been included with Homebridge for a while, still it is required to be installed for this widget to work.</p> <p>Allowed fields: <code>[\"updates\", \"child_bridges\"]</code>.</p> <pre><code>widget:\n  type: homebridge\n  url: http://homebridge.host.or.ip:port\n  username: username\n  password: password\n</code></pre>"},{"location":"widgets/services/iframe/","title":"iFrame","text":"<p>A basic iFrame widget to show external content, see the MDN docs for more details about some of the options.</p> <p>Warning</p> <p>Requests made via the iFrame widget are inherently not proxied as they are made from the browser itself.</p>"},{"location":"widgets/services/iframe/#basic-example","title":"Basic Example","text":"<pre><code>widget:\n  type: iframe\n  name: myIframe\n  src: http://example.com\n</code></pre>"},{"location":"widgets/services/iframe/#full-example","title":"Full Example","text":"<pre><code>widget:\n  type: iframe\n  name: myIframe\n  src: http://example.com\n  classes: h-60 sm:h-60 md:h-60 lg:h-60 xl:h-60 2xl:h-72 # optional, use tailwind height classes, see https://tailwindcss.com/docs/height\n  referrerPolicy: same-origin # optional, no default\n  allowPolicy: autoplay; fullscreen; gamepad # optional, no default\n  allowFullscreen: false # optional, default: true\n  loadingStrategy: eager # optional, default: eager\n  allowScrolling: no # optional, default: yes\n  refreshInterval: 2000 # optional, no default\n</code></pre>"},{"location":"widgets/services/immich/","title":"Immich","text":"<p>Learn more about Immich.</p> Immich Version Homepage Widget Version &lt; v1.118 1 (default) &gt;= v1.118 2 <p>Find your API key under <code>Account Settings &gt; API Keys</code>. The key should have the <code>server.statistics</code> permission.</p> <p>Allowed fields: <code>[\"users\" ,\"photos\", \"videos\", \"storage\"]</code>.</p> <pre><code>widget:\n  type: immich\n  url: http://immich.host.or.ip\n  key: adminapikeyadminapikeyadminapikey\n  version: 2 # optional, default is 1\n</code></pre>"},{"location":"widgets/services/jackett/","title":"Jackett","text":"<p>Learn more about Jackett.</p> <p>If Jackett has an admin password set, you must set the <code>password</code> field for the widget to work.</p> <p>Allowed fields: <code>[\"configured\", \"errored\"]</code>.</p> <pre><code>widget:\n  type: jackett\n  url: http://jackett.host.or.ip\n  password: jackettadminpassword # optional\n</code></pre>"},{"location":"widgets/services/jdownloader/","title":"JDownloader","text":"<p>Learn more about JDownloader.</p> <p>Basic widget to show number of items in download queue, along with the queue size and current download speed.</p> <p>Allowed fields: <code>[\"downloadCount\", \"downloadTotalBytes\",\"downloadBytesRemaining\", \"downloadSpeed\"]</code>.</p> <pre><code>widget:\n  type: jdownloader\n  username: JDownloader Username\n  password: JDownloader Password\n  client: Name of JDownloader Instance\n</code></pre>"},{"location":"widgets/services/jellyfin/","title":"Jellyfin","text":"<p>Learn more about Jellyfin.</p> <p>You can create an API key from inside Jellyfin at <code>Settings &gt; Advanced &gt; Api Keys</code>.</p> <p>As of v0.6.11 the widget supports fields <code>[\"movies\", \"series\", \"episodes\", \"songs\"]</code>. These blocks are disabled by default but can be enabled with the <code>enableBlocks</code> option, and the \"Now Playing\" feature (enabled by default) can be disabled with the <code>enableNowPlaying</code> option.</p> <pre><code>widget:\n  type: jellyfin\n  url: http://jellyfin.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n  enableBlocks: true # optional, defaults to false\n  enableNowPlaying: true # optional, defaults to true\n  enableUser: true # optional, defaults to false\n  enableMediaControl: false # optional, defaults to true\n  showEpisodeNumber: true # optional, defaults to false\n  expandOneStreamToTwoRows: false # optional, defaults to true\n</code></pre>"},{"location":"widgets/services/jellyseerr/","title":"Jellyseerr","text":"<p>Learn more about Jellyseerr.</p> <p>Find your API key under <code>Settings &gt; General &gt; API Key</code>.</p> <p>Allowed fields: <code>[\"pending\", \"approved\", \"available\", \"issues\"]</code>. Default fields: <code>[\"pending\", \"approved\", \"available\"]</code>.</p> <pre><code>widget:\n  type: jellyseerr\n  url: http://jellyseerr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"widgets/services/jellystat/","title":"Jellystat","text":"<p>Learn more about Jellystat. The widget supports (at least) Jellystat version 1.1.6</p> <p>You can create an API key from inside Jellystat at <code>Settings &gt; API Key</code>.</p> <p>Allowed fields: <code>[\"songs\", \"movies\", \"episodes\", \"other\"]</code>.</p> <pre><code>widget:\n  type: jellystat\n  url: http://jellystat.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n  days: 30 # optional, defaults to 30\n</code></pre>"},{"location":"widgets/services/karakeep/","title":"Karakeep","text":"<p>Learn more about Karakeep (formerly known as Hoarder).</p> <p>Generate an API key for your user at <code>User Settings &gt; API Keys</code>.</p> <p>Allowed fields: <code>[\"bookmarks\", \"favorites\", \"archived\", \"highlights\", \"lists\", \"tags\"]</code> (maximum of 4).</p> <pre><code>widget:\n  type: karakeep\n  url: http[s]://karakeep.host.or.ip[:port]\n  key: karakeep_api_key\n</code></pre>"},{"location":"widgets/services/kavita/","title":"Kavita","text":"<p>Learn more about Kavita.</p> <p>Uses the same admin role username and password used to login from the web.</p> <p>Allowed fields: <code>[\"seriesCount\", \"totalFiles\"]</code>.</p> <pre><code>widget:\n  type: kavita\n  url: http://kavita.host.or.ip:port\n  username: username\n  password: password\n  key: kavitaapikey # Optional, e.g. if not using username and password\n</code></pre>"},{"location":"widgets/services/komga/","title":"Komga","text":"<p>Learn more about Komga.</p> <p>Uses the same username and password used to login from the web.</p> <p>Allowed fields: <code>[\"libraries\", \"series\", \"books\"]</code>.</p> Komga API Version Homepage Widget Version &lt; v2 1 (default) &gt;= v2 2 <pre><code>widget:\n  type: komga\n  url: http://komga.host.or.ip:port\n  username: username\n  password: password\n  key: komgaapikey # optional\n</code></pre>"},{"location":"widgets/services/komodo/","title":"Komodo","text":"<p>This widget shows either details about all containers or stacks (if <code>showStacks</code> is true) managed by Komodo or the number of running servers, containers and stacks when <code>showSummary</code> is enabled.</p> <p>The api key and secret can be found in the Komodo settings.</p> <p>Allowed fields (max 4): <code>[\"total\", \"running\", \"stopped\", \"unhealthy\", \"unknown\"]</code>. Allowed fields with <code>showStacks</code> (max 4): <code>[\"total\", \"running\", \"down\", \"unhealthy\", \"unknown\"]</code>. Allowed fields with <code>showSummary</code>: <code>[\"servers\", \"stacks\", \"containers\"]</code>.</p> <pre><code>widget:\n  type: komodo\n  url: http://komodo.hostname.or.ip:port\n  key: K-xxxxxx...\n  secret: S-xxxxxx...\n  showSummary: true # optional, default: false\n  showStacks: true # optional, default: false\n</code></pre>"},{"location":"widgets/services/kopia/","title":"Kopia","text":"<p>Learn more about Kopia.</p> <p>Allowed fields: <code>[\"status\", \"size\", \"lastrun\", \"nextrun\"]</code>.</p> <p>You may optionally pass values for <code>snapshotHost</code> and / or <code>snapshotPath</code> to select a specific backup source for the widget.</p> <pre><code>widget:\n  type: kopia\n  url: http://kopia.host.or.ip:port\n  username: username\n  password: password\n  snapshotHost: hostname # optional\n  snapshotPath: path # optional\n</code></pre>"},{"location":"widgets/services/lidarr/","title":"Lidarr","text":"<p>Learn more about Lidarr.</p> <p>Find your API key under <code>Settings &gt; General</code>.</p> <p>Allowed fields: <code>[\"wanted\", \"queued\", \"artists\"]</code>.</p> <pre><code>widget:\n  type: lidarr\n  url: http://lidarr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"widgets/services/linkwarden/","title":"Linkwarden","text":"<p>Learn more about Linkwarden.</p> <p>Allowed fields: <code>[\"links\", \"collections\", \"tags\"]</code>.</p> <pre><code>widget:\n  type: linkwarden\n  url: http://linkwarden.host.or.ip\n  key: myApiKeyHere # On your Linkwarden install, go to Settings &gt; Access Tokens. Generate a token.\n</code></pre>"},{"location":"widgets/services/lubelogger/","title":"LubeLogger","text":"<p>Learn more about LubeLogger (v1.3.7 or higher is required).</p> <p>The widget comes in two 'flavors', one shows data for all vehicles or for just a specific vehicle with the <code>vehicleID</code> parameter.</p> <p>Allowed fields: <code>[\"vehicles\", \"serviceRecords\", \"reminders\"]</code>. For the single-vehicle version: <code>[\"vehicle\", \"serviceRecords\", \"reminders\", \"nextReminder\"]</code>.</p> <pre><code>widget:\n  type: lubelogger\n  url: https://lubelogger.host.or.ip\n  username: lubeloggerusername\n  password: lubeloggerpassword\n  vehicleID: 1 # optional, changes to single-vehicle version\n</code></pre>"},{"location":"widgets/services/mailcow/","title":"Mailcow","text":"<p>Learn more about Mailcow.</p> <p>Allowed fields: <code>[\"domains\", \"mailboxes\", \"mails\", \"storage\"]</code>.</p> <pre><code>widget:\n  type: mailcow\n  url: https://mailcow.host.or.ip\n  key: mailcowapikey\n</code></pre>"},{"location":"widgets/services/mastodon/","title":"Mastodon","text":"<p>Learn more about Mastodon.</p> <p>Use the base URL of the Mastodon instance you'd like to pull stats for. Does not require authentication as the stats are part of the public API endpoints.</p> <p>Allowed fields: <code>[\"user_count\", \"status_count\", \"domain_count\"]</code>.</p> <pre><code>widget:\n  type: mastodon\n  url: https://mastodon.host.name\n</code></pre>"},{"location":"widgets/services/mealie/","title":"Mealie","text":"<p>Learn more about Mealie.</p> <p>Generate a user API key under <code>Profile &gt; Manage Your API Tokens &gt; Generate</code>.</p> <p>Allowed fields: <code>[\"recipes\", \"users\", \"categories\", \"tags\"]</code>.</p> <pre><code>widget:\n  type: mealie\n  url: http://mealie-frontend.host.or.ip\n  key: mealieapitoken\n  version: 2 # only required if version &gt; 1, defaults to 1\n</code></pre>"},{"location":"widgets/services/medusa/","title":"Medusa","text":"<p>Learn more about Medusa.</p> <p>Allowed fields: <code>[\"wanted\", \"queued\", \"series\"]</code>.</p> <pre><code>widget:\n  type: medusa\n  url: http://medusa.host.or.ip:port\n  key: medusaapikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"widgets/services/mikrotik/","title":"Mikrotik","text":"<p>HTTPS may be required, per the documentation</p> <p>Allowed fields: <code>[\"uptime\", \"cpuLoad\", \"memoryUsed\", \"numberOfLeases\"]</code>.</p> <pre><code>widget:\n  type: mikrotik\n  url: https://mikrotik.host.or.ip\n  username: username\n  password: password\n</code></pre>"},{"location":"widgets/services/minecraft/","title":"Minecraft","text":"<p>Allowed fields: <code>[\"players\", \"version\", \"status\"]</code>.</p> <pre><code>widget:\n  type: minecraft\n  url: udp://minecraftserveripordomain:port\n</code></pre>"},{"location":"widgets/services/miniflux/","title":"Miniflux","text":"<p>Learn more about Miniflux.</p> <p>Api key is found under Settings &gt; API keys</p> <p>Allowed fields: <code>[\"unread\", \"read\"]</code>.</p> <pre><code>widget:\n  type: miniflux\n  url: http://miniflux.host.or.ip:port\n  key: minifluxapikey\n</code></pre>"},{"location":"widgets/services/mjpeg/","title":"MJPEG","text":"<p>Pass the stream URL from a service like \u00b5Streamer or camera-streamer.</p> <pre><code>widget:\n  type: mjpeg\n  stream: http://mjpeg.host.or.ip/webcam/stream\n</code></pre>"},{"location":"widgets/services/moonraker/","title":"Moonraker (Klipper)","text":"<p>Learn more about Moonraker.</p> <p>Allowed fields: <code>[\"printer_state\", \"print_status\", \"print_progress\", \"layers\"]</code>.</p> <pre><code>widget:\n  type: moonraker\n  url: http://moonraker.host.or.ip:port\n</code></pre> <p>If your moonraker instance has an active authorization and your homepage ip isn't whitelisted you need to add your api key (Authorization Documentation).</p> <pre><code>widget:\n  type: moonraker\n  url: http://moonraker.host.or.ip:port\n  key: api_keymoonraker\n</code></pre>"},{"location":"widgets/services/mylar/","title":"Mylar3","text":"<p>Learn more about Mylar3.</p> <p>API must be enabled in Mylar3 settings.</p> <p>Allowed fields: <code>[\"series\", \"issues\", \"wanted\"]</code>.</p> <pre><code>widget:\n  type: mylar\n  url: http://mylar3.host.or.ip:port\n  key: yourmylar3apikey\n</code></pre>"},{"location":"widgets/services/myspeed/","title":"MySpeed","text":"<p>Learn more about MySpeed.</p> <p>Allowed fields: <code>[\"ping\", \"download\", \"upload\"]</code>.</p> <pre><code>widget:\n  type: myspeed\n  url: http://myspeed.host.or.ip:port\n  password: password # only required if password is set\n</code></pre>"},{"location":"widgets/services/navidrome/","title":"Navidrome","text":"<p>Learn more about Navidrome.</p> <p>For detailed information about how to generate the token see http://www.subsonic.org/pages/api.jsp.</p> <p>Allowed fields: no configurable fields for this widget.</p> <pre><code>widget:\n  type: navidrome\n  url: http://navidrome.host.or.ip:port\n  user: username\n  token: token #md5(password + salt)\n  salt: randomsalt\n</code></pre>"},{"location":"widgets/services/netalertx/","title":"NetAlertX","text":"<p>Learn more about NetAlertX.</p> <p>Note that the project was renamed from PiAlert to NetAlertX.</p> <p>Allowed fields: <code>[\"total\", \"connected\", \"new_devices\", \"down_alerts\"]</code>.</p> <p>If you have enabled a password on your NetAlertX instance, you will need to provide the <code>SYNC_api_token</code> as the <code>key</code> in your config.</p> <pre><code>widget:\n  type: netalertx\n  url: http://ip:port\n  key: netalertxsyncapitoken # optional, only if password is enabled\n</code></pre>"},{"location":"widgets/services/netdata/","title":"Netdata","text":"<p>Learn more about Netdata.</p> <p>Allowed fields: <code>[\"warnings\", \"criticals\"]</code>.</p> <pre><code>widget:\n  type: netdata\n  url: http://netdata.host.or.ip\n</code></pre>"},{"location":"widgets/services/nextcloud/","title":"Nextcloud","text":"<p>Learn more about Nextcloud.</p> <p>Use username &amp; password, or the <code>NC-Token</code> key. Information about the token can be found under Settings &gt; System. If both are provided, NC-Token will be used.</p> <p>Allowed fields: <code>[\"cpuload\", \"memoryusage\", \"freespace\", \"activeusers\", \"numfiles\", \"numshares\"]</code>.</p> <p>Note \"cpuload\" and \"memoryusage\" were deprecated in v0.6.18 and a maximum of 4 fields can be displayed.</p> <pre><code>widget:\n  type: nextcloud\n  url: https://nextcloud.host.or.ip:port\n  key: token\n</code></pre> <pre><code>widget:\n  type: nextcloud\n  url: https://nextcloud.host.or.ip:port\n  username: username\n  password: password\n</code></pre>"},{"location":"widgets/services/nextdns/","title":"NextDNS","text":"<p>Learn more about NextDNS.</p> <p>Api key is found under Account &gt; API, profile ID is found under Setup &gt; Endpoints &gt; ID</p> <pre><code>widget:\n  type: nextdns\n  profile: profileid\n  key: yourapikeyhere\n</code></pre>"},{"location":"widgets/services/nginx-proxy-manager/","title":"Nginx Proxy Manager","text":"<p>Learn more about Nginx Proxy Manager.</p> <p>Login with the same admin username and password used to access the web UI.</p> <p>Allowed fields: <code>[\"enabled\", \"disabled\", \"total\"]</code>.</p> <pre><code>widget:\n  type: npm\n  url: http://npm.host.or.ip\n  username: admin_username\n  password: admin_password\n</code></pre>"},{"location":"widgets/services/nzbget/","title":"NZBget","text":"<p>Learn more about NZBget.</p> <p>This widget uses the same authentication method as your browser when logging in (HTTP Basic Auth), and is often referred to as the ControlUsername and ControlPassword inside of Nzbget documentation.</p> <p>Allowed fields: <code>[\"rate\", \"remaining\", \"downloaded\"]</code>.</p> <pre><code>widget:\n  type: nzbget\n  url: http://nzbget.host.or.ip\n  username: controlusername\n  password: controlpassword\n</code></pre>"},{"location":"widgets/services/octoprint/","title":"OctoPrint","text":"<p>Learn more about OctoPrint.</p> <p>Allowed fields: <code>[\"printer_state\", \"temp_tool\", \"temp_bed\", \"job_completion\"]</code>.</p> <pre><code>widget:\n  type: octoprint\n  url: http://octoprint.host.or.ip:port\n  key: youroctoprintapikey\n</code></pre>"},{"location":"widgets/services/omada/","title":"Omada","text":"<p>The widget supports controller versions 3, 4 and 5.</p> <p>Allowed fields: <code>[\"connectedAp\", \"activeUser\", \"alerts\", \"connectedGateways\", \"connectedSwitches\"]</code>.</p> <pre><code>widget:\n  type: omada\n  url: http://omada.host.or.ip:port\n  username: username\n  password: password\n  site: sitename\n</code></pre>"},{"location":"widgets/services/ombi/","title":"Ombi","text":"<p>Learn more about Ombi.</p> <p>Find your API key under <code>Settings &gt; Configuration &gt; General</code>.</p> <p>Allowed fields: <code>[\"pending\", \"approved\", \"available\"]</code>.</p> <pre><code>widget:\n  type: ombi\n  url: http://ombi.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"widgets/services/opendtu/","title":"OpenDTU","text":"<p>Learn more about OpenDTU.</p> <p>Allowed fields: <code>[\"yieldDay\", \"relativePower\", \"absolutePower\", \"limit\"]</code>.</p> <pre><code>widget:\n  type: opendtu\n  url: http://opendtu.host.or.ip\n</code></pre>"},{"location":"widgets/services/openmediavault/","title":"OpenMediaVault","text":"<p>Learn more about OpenMediaVault.</p> <p>Provides useful information from your OpenMediaVault</p> <pre><code>widget:\n  type: openmediavault\n  url: http://omv.host.or.ip\n  username: admin\n  password: pass\n  method: services.getStatus # required\n</code></pre>"},{"location":"widgets/services/openmediavault/#methods","title":"Methods","text":"<p>The method field determines the type of data to be displayed and is required. Supported methods:</p> <p><code>services.getStatus</code>: Shows status of running services. Allowed fields: <code>[\"running\", \"stopped\", \"total\"]</code></p> <p><code>smart.getListBg</code>: Shows S.M.A.R.T. status from disks. Allowed fields: <code>[\"passed\", \"failed\"]</code></p> <p><code>downloader.getDownloadList</code>: Displays the number of tasks from the Downloader plugin currently being downloaded and total. Allowed fields: <code>[\"downloading\", \"total\"]</code></p>"},{"location":"widgets/services/openwrt/","title":"OpenWRT","text":"<p>Learn more about OpenWRT.</p> <p>Provides information from OpenWRT</p> <pre><code>widget:\n  type: openwrt\n  url: http://host.or.ip\n  username: homepage\n  password: pass\n  interfaceName: eth0 # optional\n</code></pre>"},{"location":"widgets/services/openwrt/#interface","title":"Interface","text":"<p>Setting <code>interfaceName</code> (e.g. eth0) will display information for that particular device, otherwise the widget will display general system info.</p>"},{"location":"widgets/services/openwrt/#authorization","title":"Authorization","text":"<p>In order for homepage to access the OpenWRT RPC endpoints you will need to create an ACL and new user in OpenWRT.</p> <p>Create an ACL named <code>homepage.json</code> in <code>/usr/share/rpcd/acl.d/</code>, the following permissions will suffice:</p> <pre><code>{\n  \"homepage\": {\n    \"description\": \"Homepage widget\",\n    \"read\": {\n      \"ubus\": {\n        \"network.interface.wan\": [\"status\"],\n        \"network.interface.lan\": [\"status\"],\n        \"network.device\": [\"status\"],\n        \"system\": [\"info\"]\n      }\n    }\n  }\n}\n</code></pre> <p>Create a <code>crypt(5)</code> password hash using the following command in the OpenWRT shell:</p> <pre><code>uhttpd -m \"&lt;somepassphrase&gt;\"\n</code></pre> <p>Then add a user that will use the ACL and hashed password in <code>/etc/config/rpcd</code>:</p> <pre><code>config login\n        option username 'homepage'\n        option password '&lt;hashedpassword&gt;'\n        list read homepage\n</code></pre> <p>This username and password will be used in Homepage's services.yaml to grant access.</p>"},{"location":"widgets/services/opnsense/","title":"OPNSense","text":"<p>Learn more about OPNSense.</p> <p>The API key &amp; secret can be generated via the webui by creating a new user at System/Access/Users. Ensure \"Generate a scrambled password to prevent local database logins for this user\" is checked and then edit the effective privileges selecting only:</p> <ul> <li>Diagnostics: System Activity</li> <li>Status: Traffic Graph / Reporting: Traffic (OPNSENSE 24.7.x)</li> </ul> <p>Finally, create a new API key which will download an <code>apikey.txt</code> file with your key and secret in it. Use the values as the username and password fields, respectively, in your homepage config.</p> <p>Allowed fields: <code>[\"cpu\", \"memory\", \"wanUpload\", \"wanDownload\"]</code>.</p> <pre><code>widget:\n  type: opnsense\n  url: http://opnsense.host.or.ip\n  username: key\n  password: secret\n  wan: opt1 # optional, defaults to wan\n</code></pre>"},{"location":"widgets/services/overseerr/","title":"Overseerr","text":"<p>Learn more about Overseerr.</p> <p>Find your API key under <code>Settings &gt; General</code>.</p> <p>Allowed fields: <code>[\"pending\", \"approved\", \"available\", \"processing\"]</code>.</p> <pre><code>widget:\n  type: overseerr\n  url: http://overseerr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"widgets/services/paperlessngx/","title":"Paperless-ngx","text":"<p>Learn more about Paperless-ngx.</p> <p>Use username &amp; password, or the token key. Information about the token can be found in the Paperless-ngx API documentation. If both are provided, the token will be used.</p> <p>Allowed fields: <code>[\"total\", \"inbox\"]</code>.</p> <pre><code>widget:\n  type: paperlessngx\n  url: http://paperlessngx.host.or.ip:port\n  username: username\n  password: password\n</code></pre> <pre><code>widget:\n  type: paperlessngx\n  url: http://paperlessngx.host.or.ip:port\n  key: token\n</code></pre>"},{"location":"widgets/services/peanut/","title":"PeaNUT","text":"<p>Learn more about PeaNUT.</p> <p>This widget adds support for Network UPS Tools via a third party tool, PeaNUT.</p> <p>The default ups name is <code>ups</code>. To configure more than one ups, you must create multiple peanut services.</p> <p>Allowed fields: <code>[\"battery_charge\", \"ups_load\", \"ups_status\"]</code>.</p> <p>Note</p> <p>This widget requires an additional tool, PeaNUT, as noted. Other projects exist to achieve similar results using a <code>customapi</code> widget, for example NUTCase.</p> <pre><code>widget:\n  type: peanut\n  url: http://peanut.host.or.ip:port\n  key: nameofyourups\n  username: username # only needed if set\n  password: password # only needed if set\n</code></pre>"},{"location":"widgets/services/pfsense/","title":"pfSense","text":"<p>Learn more about pfSense.</p> <p>This widget requires the installation of the pfsense-api which is a 3rd party package for pfSense routers.</p> <p>Once pfSense API is installed, you can set the API to be read-only in System &gt; API &gt; Settings.</p> <p>There are two currently supported authentication modes: 'Local Database' and 'API Key' (v2) / 'API Token' (v1). For 'Local Database', use <code>username</code> and <code>password</code> with the credentials of an admin user. The specifics of using the API key / token depend on the version of the pfSense API, see the config examples below. Do not use both headers and username / password.</p> <p>The interface to monitor is defined by updating the <code>wan</code> parameter. It should be referenced as it is shown under Interfaces &gt; Assignments in pfSense.</p> <p>Load is returned instead of cpu utilization. This is a limitation in the pfSense API due to the complexity of this calculation. This may become available in future versions.</p> <p>Allowed fields: <code>[\"load\", \"memory\", \"temp\", \"wanStatus\", \"wanIP\", \"disk\"]</code> (maximum of 4)</p> <p>For version 2:</p> <pre><code>widget:\n  type: pfsense\n  url: http://pfsense.host.or.ip:port\n  username: user # optional, or API key\n  password: pass # optional, or API key\n  headers: # optional, or username/password\n    X-API-Key: key\n  wan: igb0\n  version: 2 # optional, defaults to 1 for api v1\n  fields: [\"load\", \"memory\", \"temp\", \"wanStatus\"] # optional\n</code></pre> <p>For version 1:</p> <pre><code>headers: # optional, or username/password\n  Authorization: client_id client_token # obtained from pfSense API\nversion: 1\n</code></pre>"},{"location":"widgets/services/photoprism/","title":"PhotoPrism","text":"<p>Learn more about PhotoPrism.</p> <p>Authentication is possible via app passwords or username/password.</p> <p>Allowed fields: <code>[\"albums\", \"photos\", \"videos\", \"people\"]</code>.</p> <pre><code>widget:\n  type: photoprism\n  url: http://photoprism.host.or.ip:port\n  username: admin # required only if using username/password\n  password: password # required only if using username/password\n  key: # required only if using app passwords\n</code></pre>"},{"location":"widgets/services/pihole/","title":"PiHole","text":"<p>Learn more about PiHole.</p> <p>Allowed fields: <code>[\"queries\", \"blocked\", \"blocked_percent\", \"gravity\"]</code>.</p> <p>Note: by default the \"blocked\" and \"blocked_percent\" fields are merged e.g. \"1,234 (15%)\" but explicitly including the \"blocked_percent\" field will change them to display separately.</p> <pre><code>widget:\n  type: pihole\n  url: http://pi.hole.or.ip\n  version: 6 # required if running v6 or higher, defaults to 5\n  key: yourpiholeapikey # optional, in v6 can be your password or app password\n</code></pre>"},{"location":"widgets/services/plantit/","title":"Plant-it","text":"<p>Learn more about Plantit.</p> <p>API key can be created from the REST API.</p> <p>Allowed fields: <code>[\"events\", \"plants\", \"photos\", \"species\"]</code>.</p> <pre><code>widget:\n  type: plantit\n  url: http://plant-it.host.or.ip:port # api port\n  key: plantit-api-key\n</code></pre>"},{"location":"widgets/services/plex-tautulli/","title":"Tautulli (Plex)","text":"<p>Learn more about Tautulli.</p> <p>Provides detailed information about currently active streams. You can find the API key from inside Tautulli at <code>Settings &gt; Web Interface &gt; API</code>.</p> <p>Allowed fields: no configurable fields for this widget.</p> <pre><code>widget:\n  type: tautulli\n  url: http://tautulli.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n  enableUser: true # optional, defaults to false\n  showEpisodeNumber: true # optional, defaults to false\n  expandOneStreamToTwoRows: false # optional, defaults to true\n</code></pre>"},{"location":"widgets/services/plex/","title":"Plex","text":"<p>Learn more about Plex.</p> <p>The core Plex API is somewhat limited but basic info regarding library sizes and the number of active streams is supported. For more detailed info regarding active streams see the Plex Tautulli widget.</p> <p>Allowed fields: <code>[\"streams\", \"albums\", \"movies\", \"tv\"]</code>.</p> <pre><code>widget:\n  type: plex\n  url: http://plex.host.or.ip:32400\n  key: mytokenhere # see https://www.plexopedia.com/plex-media-server/general/plex-token/\n</code></pre>"},{"location":"widgets/services/portainer/","title":"Portainer","text":"<p>Learn more about Portainer.</p> <p>You'll need to make sure you have the correct environment set for the integration to work properly. From the Environments section inside of Portainer, click the one you'd like to connect to and observe the ID at the end of the URL (should be), something like <code>#!/endpoints/1</code>, here <code>1</code> is the value to set as the <code>env</code> value. In order to generate an API key, please follow the steps outlined here https://docs.portainer.io/api/access.</p> <p>Allowed fields:</p> <ul> <li>For Docker mode (default): <code>[\"running\", \"stopped\", \"total\"]</code></li> <li>For Kubernetes mode (<code>kubernetes: true</code>): <code>[\"applications\", \"services\", \"namespaces\"]</code></li> </ul> <pre><code>widget:\n  type: portainer\n  url: https://portainer.host.or.ip:9443\n  env: 1\n  kubernetes: true # optional, defaults to false\n  key: ptr_accesskeyaccesskeyaccesskeyaccesskey\n</code></pre>"},{"location":"widgets/services/prometheus/","title":"Prometheus","text":"<p>Learn more about Prometheus.</p> <p>Allowed fields: <code>[\"targets_up\", \"targets_down\", \"targets_total\"]</code>.</p> <pre><code>widget:\n  type: prometheus\n  url: http://prometheushost:port\n</code></pre>"},{"location":"widgets/services/prometheusmetric/","title":"Prometheus Metric","text":"<p>Learn more about Querying Prometheus.</p> <p>This widget can show metrics for your service defined by PromQL queries which are requested from a running Prometheus instance.</p> <p>Quries can be defined in the <code>metrics</code> array of the widget along with a label to be used to present the metric value. You can optionally specify a global <code>refreshInterval</code> in milliseconds and/or define the <code>refreshInterval</code> per metric. Inside the optional <code>format</code> object of a metric various formatting styles and transformations can be applied (see below).</p> <pre><code>widget:\n  type: prometheusmetric\n  url: https://prometheus.host.or.ip\n  refreshInterval: 10000 # optional - in milliseconds, defaults to 10s\n  metrics:\n    - label: Metric 1\n      query: alertmanager_alerts{state=\"active\"}\n    - label: Metric 2\n      query: apiserver_storage_size_bytes{node=\"mynode\"}\n      format:\n        type: bytes\n    - label: Metric 3\n      query: avg(prometheus_notifications_latency_seconds)\n      format:\n        type: number\n        suffix: s\n        options:\n          maximumFractionDigits: 4\n    - label: Metric 4\n      query: time()\n      refreshInterval: 1000 # will override global refreshInterval\n      format:\n        type: date\n        scale: 1000\n        options:\n          timeStyle: medium\n</code></pre>"},{"location":"widgets/services/prometheusmetric/#formatting","title":"Formatting","text":"<p>Supported values for <code>format.type</code> are <code>text</code>, <code>number</code>, <code>percent</code>, <code>bytes</code>, <code>bits</code>, <code>bbytes</code>, <code>bbits</code>, <code>byterate</code>, <code>bibyterate</code>, <code>bitrate</code>, <code>bibitrate</code>, <code>date</code>, <code>duration</code>, <code>relativeDate</code>, and <code>text</code> which is the default.</p> <p>The <code>dateStyle</code> and <code>timeStyle</code> options of the <code>date</code> format are passed directly to Intl.DateTimeFormat and the <code>style</code> and <code>numeric</code> options of <code>relativeDate</code> are passed to Intl.RelativeTimeFormat. For the <code>number</code> format, options of Intl.NumberFormat can be used, e.g. <code>maximumFractionDigits</code> or <code>minimumFractionDigits</code>.</p>"},{"location":"widgets/services/prometheusmetric/#data-transformation","title":"Data Transformation","text":"<p>You can manipulate your metric value with the following tools: <code>scale</code>, <code>prefix</code> and <code>suffix</code>, for example:</p> <pre><code>- query: my_custom_metric{}\n  label: Metric 1\n  format:\n    type: number\n    scale: 1000 # multiplies value by a number or fraction string e.g. 1/16\n- query: my_custom_metric{}\n  label: Metric 2\n  format:\n    type: number\n    prefix: \"$\" # prefixes value with given string\n- query: my_custom_metric{}\n  label: Metric 3\n  format:\n    type: number\n    suffix: \"\u20ac\" # suffixes value with given string\n</code></pre>"},{"location":"widgets/services/prowlarr/","title":"Prowlarr","text":"<p>Learn more about Prowlarr.</p> <p>Find your API key under <code>Settings &gt; General</code>.</p> <p>Allowed fields: <code>[\"numberOfGrabs\", \"numberOfQueries\", \"numberOfFailGrabs\", \"numberOfFailQueries\"]</code>.</p> <pre><code>widget:\n  type: prowlarr\n  url: http://prowlarr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"widgets/services/proxmox/","title":"Proxmox","text":"<p>Learn more about Proxmox.</p> <p>This widget shows the running and total counts of both QEMU VMs and LX Containers in the Proxmox cluster. It also shows the CPU and memory usage of the first node in the cluster.</p> <p>See the Proxmox configuration documentation for details on creating API tokens.</p> <p>Use <code>username@pam!Token ID</code> as the <code>username</code> (e.g <code>api@pam!homepage</code>) setting and <code>Secret</code> as the <code>password</code> setting.</p> <p>Allowed fields: <code>[\"vms\", \"lxc\", \"resources.cpu\", \"resources.mem\"]</code>.</p> <p>You can set the optional <code>node</code> setting when you want to show metrics for a single node. By default it will show the average for the complete cluster.</p> <pre><code>widget:\n  type: proxmox\n  url: https://proxmox.host.or.ip:8006\n  username: api_token_id\n  password: api_token_secret\n  node: pve-1 # optional\n</code></pre>"},{"location":"widgets/services/proxmoxbackupserver/","title":"Proxmox Backup Server","text":"<p>Learn more about Proxmox Backup Server.</p> <p>Create a user and an API token similar to the Proxmox VE description. The \"Audit\" role is required for both the user and token (not group).</p> <p>Allowed fields: <code>[\"datastore_usage\", \"failed_tasks_24h\", \"cpu_usage\", \"memory_usage\"]</code>.</p> <pre><code>widget:\n  type: proxmoxbackupserver\n  url: https://proxmoxbackupserver.host:port\n  username: api_token_id\n  password: api_token_secret\n  datastore: datastore_name #optional; if ommitted, will display a combination of all datastores used / total\n</code></pre>"},{"location":"widgets/services/pterodactyl/","title":"Pterodactyl","text":"<p>Learn more about Pterodactyl.</p> <p>Allowed fields: <code>[\"nodes\", \"servers\"]</code>.</p> <pre><code>widget:\n  type: pterodactyl\n  url: http://pterodactylhost:port\n  key: pterodactylapikey\n</code></pre>"},{"location":"widgets/services/pyload/","title":"Pyload","text":"<p>Learn more about Pyload.</p> <p>Allowed fields: <code>[\"speed\", \"active\", \"queue\", \"total\"]</code>.</p> <pre><code>widget:\n  type: pyload\n  url: http://pyload.host.or.ip:port\n  username: username\n  password: password # only needed if set\n</code></pre>"},{"location":"widgets/services/qbittorrent/","title":"qBittorrent","text":"<p>Learn more about qBittorrent.</p> <p>Uses the same username and password used to login from the web.</p> <p>Allowed fields: <code>[\"leech\", \"download\", \"seed\", \"upload\"]</code>.</p> <pre><code>widget:\n  type: qbittorrent\n  url: http://qbittorrent.host.or.ip\n  username: username\n  password: password\n  enableLeechProgress: true # optional, defaults to false\n</code></pre>"},{"location":"widgets/services/qnap/","title":"QNAP","text":"<p>Learn more about QNAP.</p> <p>Allowed fields: <code>[\"cpuUsage\", \"memUsage\", \"systemTempC\", \"poolUsage\", \"volumeUsage\"]</code>.</p> <pre><code>widget:\n  type: qnap\n  url: http://qnap.host.or.ip:port\n  username: user\n  password: pass\n</code></pre> <p>If the QNAP device has multiple volumes, the poolUsage will be a sum of all volumes.</p> <p>If only a single volume needs to be tracked, add the following to your configuration and the Widget will track this as volumeUsage:</p> <pre><code>volume: Volume Name From QNAP\n</code></pre>"},{"location":"widgets/services/radarr/","title":"Radarr","text":"<p>Learn more about Radarr.</p> <p>Find your API key under <code>Settings &gt; General</code>.</p> <p>Allowed fields: <code>[\"wanted\", \"missing\", \"queued\", \"movies\"]</code>.</p> <p>A detailed queue listing is disabled by default, but can be enabled with the <code>enableQueue</code> option.</p> <pre><code>widget:\n  type: radarr\n  url: http://radarr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n  enableQueue: true # optional, defaults to false\n</code></pre>"},{"location":"widgets/services/readarr/","title":"Readarr","text":"<p>Learn more about Readarr.</p> <p>Find your API key under <code>Settings &gt; General</code>.</p> <p>Allowed fields: <code>[\"wanted\", \"queued\", \"books\"]</code>.</p> <pre><code>widget:\n  type: readarr\n  url: http://readarr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"widgets/services/romm/","title":"Romm","text":"<p>Allowed fields: <code>[\"platforms\", \"totalRoms\", \"saves\", \"states\", \"screenshots\", \"totalfilesize\"]</code>. If more than (4) fields are provided, only the first (4) will be used.</p> <pre><code>widget:\n  type: romm\n  url: http://romm.host.or.ip\n  fields: [\"platforms\", \"totalRoms\", \"saves\", \"states\"] # optional - default fields shown\n</code></pre>"},{"location":"widgets/services/rutorrent/","title":"ruTorrent","text":"<p>Learn more about ruTorrent.</p> <p>This requires the <code>httprpc</code> plugin to be installed and enabled, and is part of the default ruTorrent plugins. If you have not explicitly removed or disable this plugin, it should be available.</p> <p>Allowed fields: <code>[\"active\", \"upload\", \"download\"]</code>.</p> <pre><code>widget:\n  type: rutorrent\n  url: http://rutorrent.host.or.ip\n  username: username # optional, false if not used\n  password: password # optional, false if not used\n</code></pre>"},{"location":"widgets/services/sabnzbd/","title":"SABnzbd","text":"<p>Learn more about SABnzbd.</p> <p>Find your API key under <code>Config &gt; General</code>.</p> <p>Allowed fields: <code>[\"rate\", \"queue\", \"timeleft\"]</code>.</p> <pre><code>widget:\n  type: sabnzbd\n  url: http://sabnzbd.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"widgets/services/scrutiny/","title":"Scrutiny","text":"<p>Learn more about Scrutiny.</p> <p>Allowed fields: <code>[\"passed\", \"failed\", \"unknown\"]</code>.</p> <pre><code>widget:\n  type: scrutiny\n  url: http://scrutiny.host.or.ip\n</code></pre>"},{"location":"widgets/services/slskd/","title":"Slskd","text":"<p>Learn more about Slskd.</p> <p>Generate an API key for slskd with <code>openssl rand -base64 48</code>. Add it to your <code>path/to/config/slskd.yml</code> in <code>web &gt; authentication &gt; api_keys</code>:</p> <pre><code>homepage_widget:\n  key: &lt;generated key&gt;\n  role: readonly\n  cidr: &lt;homepage subnet&gt;\n</code></pre> <p>Allowed fields: <code>[\"slskStatus\", \"updateStatus\", \"downloads\", \"uploads\", \"sharedFiles\"]</code> (maximum of 4).</p> <pre><code>widget:\n  type: slskd\n  url: http[s]://slskd.host.or.ip[:5030]\n  key: generatedapikey\n</code></pre>"},{"location":"widgets/services/sonarr/","title":"Sonarr","text":"<p>Learn more about Sonarr.</p> <p>Find your API key under <code>Settings &gt; General</code>.</p> <p>Allowed fields: <code>[\"wanted\", \"queued\", \"series\"]</code>.</p> <p>A detailed queue listing is disabled by default, but can be enabled with the <code>enableQueue</code> option.</p> <pre><code>widget:\n  type: sonarr\n  url: http://sonarr.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n  enableQueue: true # optional, defaults to false\n</code></pre>"},{"location":"widgets/services/speedtest-tracker/","title":"Speedtest Tracker","text":"<p>Learn more about Speedtest Tracker. or Speedtest Tracker</p> <p>No extra configuration is required.</p> <p>Version 1 of the widget is compatible with both alexjustesen/speedtest-tracker and henrywhitaker3/Speedtest-Tracker, while version 2 is only compatible with alexjustesen/speedtest-tracker.</p> Speedtest Version (AJ) Speedtest Version (HW) Homepage Widget Version &lt; 1.2.1 \u2264 1.12.0 1 (default) &gt;= 1.2.1 N/A 2 <p>Allowed fields: <code>[\"download\", \"upload\", \"ping\"]</code>.</p> <pre><code>widget:\n  type: speedtest\n  url: http://speedtest.host.or.ip\n  version: 1 # optional, default is 1\n  key: speedtestapikey # required for version 2\n  bitratePrecision: 3 # optional, default is 0\n</code></pre>"},{"location":"widgets/services/spoolman/","title":"Spoolman","text":"<p>Learn more about Spoolman.</p> <p>4 spools are displayed by default. If more than 4 spools are configured in spoolman you can use the spoolIds configuration option to control which are displayed.</p> <pre><code>widget:\n  type: spoolman\n  url: http://spoolman.host.or.ip\n  spoolIds: [1, 2, 3, 4] # optional\n</code></pre>"},{"location":"widgets/services/stash/","title":"Stash","text":"<p>Learn more about Stash.</p> <p>Find your API key from inside Stash at <code>Settings &gt; Security &gt; API Key</code>. Note that the API key is only required if your Stash instance has login credentials.</p> <p>Allowed fields: <code>[\"scenes\", \"scenesPlayed\", \"playCount\", \"playDuration\", \"sceneSize\", \"sceneDuration\", \"images\", \"imageSize\", \"galleries\", \"performers\", \"studios\", \"movies\", \"tags\", \"oCount\"]</code>.</p> <p>If more than 4 fields are provided, only the first 4 are displayed.</p> <pre><code>widget:\n  type: stash\n  url: http://stash.host.or.ip\n  key: stashapikey\n  fields: [\"scenes\", \"images\"] # optional - default fields shown\n</code></pre>"},{"location":"widgets/services/stocks/","title":"Stocks","text":"<p>(Find the Stocks information widget here)</p> <p>The widget includes:</p> <ul> <li>US stock market status</li> <li>Current price of provided stock symbol</li> <li>Change in price of stock symbol for the day.</li> </ul> <p>Finnhub.io is currently the only supported provider for the stocks widget. You can sign up for a free api key at finnhub.io. You are encouraged to read finnhub.io's terms of service/privacy policy before signing up.</p> <p>Allowed fields: no configurable fields for this widget.</p> <p>You must set <code>finnhub</code> as a provider in your <code>settings.yaml</code>:</p> <pre><code>providers:\n  finnhub: yourfinnhubapikeyhere\n</code></pre> <p>Next, configure the stocks widget in your <code>services.yaml</code>:</p> <p>The service widget allows for up to 28 items in the watchlist. You may get rate limited if using the information and service widgets together.</p> <pre><code>widget:\n  type: stocks\n  provider: finnhub\n  showUSMarketStatus: true # optional, defaults to true\n  watchlist:\n    - GME\n    - AMC\n    - NVDA\n    - TSM\n    - BRK.A\n    - TSLA\n    - AAPL\n    - MSFT\n    - AMZN\n    - BRK.B\n</code></pre>"},{"location":"widgets/services/suwayomi/","title":"Suwayomi","text":"<p>Learn more about Suwayomi.</p> <p>Allowed fields: [\"download\", \"nondownload\", \"read\", \"unread\", \"downloadedread\", \"downloadedunread\", \"nondownloadedread\", \"nondownloadedunread\"]</p> <p>The widget defaults to the first four above. If more than four fields are provided, only the first 4 are displayed. Category IDs can be obtained from the url when navigating to it, <code>?tab={categoryID}</code>.</p> <pre><code>widget:\n  type: suwayomi\n  url: http://suwayomi.host.or.ip\n  username: username #optional\n  password: password #optional\n  category: 0 #optional, defaults to all categories\n</code></pre>"},{"location":"widgets/services/swagdashboard/","title":"SWAG Dashboard","text":"<p>Learn more about SWAG Dashboard.</p> <p>Allowed fields: <code>[\"proxied\", \"auth\", \"outdated\", \"banned\"]</code>.</p> <pre><code>widget:\n  type: swagdashboard\n  url: http://swagdashboard.host.or.ip:adminport # default port is 81\n</code></pre>"},{"location":"widgets/services/syncthing-relay-server/","title":"Syncthing Relay Server","text":"<p>Learn more about Syncthing Relay Server.</p> <p>Pulls stats from the relay server. See here for more information on configuration.</p> <p>Allowed fields: <code>[\"numActiveSessions\", \"numConnections\", \"bytesProxied\"]</code>.</p> <pre><code>widget:\n  type: strelaysrv\n  url: http://syncthing.host.or.ip:22070\n</code></pre>"},{"location":"widgets/services/tailscale/","title":"Tailscale","text":"<p>Learn more about Tailscale.</p> <p>You will need to generate an API access token from the keys page on the Tailscale dashboard.</p> <p>To find your device ID, go to the machine overview page and select your machine. In the \"Machine Details\" section, copy your <code>ID</code>. It will end with <code>CNTRL</code>.</p> <p>Allowed fields: <code>[\"address\", \"last_seen\", \"expires\"]</code>.</p> <pre><code>widget:\n  type: tailscale\n  deviceid: deviceid\n  key: tailscalekey\n</code></pre>"},{"location":"widgets/services/tandoor/","title":"Tandoor","text":"<p>Generate a user API key under <code>Settings &gt; API  &gt; Generate</code>. For the token's scope, use <code>read</code>.</p> <p>Allowed fields: <code>[\"users\", \"recipes\", \"keywords\"]</code>.</p> <pre><code>widget:\n  type: tandoor\n  url: http://tandoor-frontend.host.or.ip\n  key: tandoor-api-token\n</code></pre>"},{"location":"widgets/services/tdarr/","title":"Tdarr","text":"<p>Learn more about Tdarr.</p> <p>Allowed fields: <code>[\"queue\", \"processed\", \"errored\", \"saved\"]</code>.</p> <pre><code>widget:\n  type: tdarr\n  url: http://tdarr.host.or.ip\n  key: tdarrapikey # optional\n</code></pre>"},{"location":"widgets/services/technitium/","title":"Technitium DNS Server","text":"<p>Learn more about Technitium DNS Server.</p> <p>Allowed fields (up to 4): <code>[\"totalQueries\",\"totalNoError\",\"totalServerFailure\",\"totalNxDomain\",\"totalRefused\",\"totalAuthoritative\",\"totalRecursive\",\"totalCached\",\"totalBlocked\",\"totalDropped\",\"totalClients\"]</code>.</p> <p>Defaults to: <code>[\"totalQueries\", \"totalAuthoritative\", \"totalCached\", \"totalServerFailure\"]</code></p> <pre><code>widget:\n  type: technitium\n  url: &lt;url to dns server&gt;\n  key: biglongapitoken\n  range: LastDay # optional, defaults to LastHour\n</code></pre>"},{"location":"widgets/services/technitium/#api-key","title":"API Key","text":"<p>This can be generated via the Technitium DNS Dashboard, and should be generated from a special API specific user.</p>"},{"location":"widgets/services/technitium/#range","title":"Range","text":"<p><code>range</code> value determines how far back of statistics to pull data for. The value comes directly from Technitium API documentation found here, defined as <code>\"type\"</code>. The value can be one of: <code>LastHour</code>, <code>LastDay</code>, <code>LastWeek</code>, <code>LastMonth</code>, <code>LastYear</code>.</p>"},{"location":"widgets/services/traefik/","title":"Traefik","text":"<p>Learn more about Traefik.</p> <p>No extra configuration is required. If your traefik install requires authentication, include the username and password used to login to the web interface.</p> <p>Allowed fields: <code>[\"routers\", \"services\", \"middleware\"]</code>.</p> <pre><code>widget:\n  type: traefik\n  url: http://traefik.host.or.ip\n  username: username # optional\n  password: password # optional\n</code></pre>"},{"location":"widgets/services/transmission/","title":"Transmission","text":"<p>Learn more about Transmission.</p> <p>Uses the same username and password used to login from the web.</p> <p>Allowed fields: <code>[\"leech\", \"download\", \"seed\", \"upload\"]</code>.</p> <pre><code>widget:\n  type: transmission\n  url: http://transmission.host.or.ip\n  username: username\n  password: password\n  rpcUrl: /transmission/ # Optional. Matches the value of \"rpc-url\" in your Transmission's settings.json file\n</code></pre>"},{"location":"widgets/services/trilium/","title":"Trilium","text":"<p>Learn more about Trilium.</p> <p>This widget is compatible with TriliumNext versions &gt;= v0.94.0.</p> <p>Find (or create) your ETAPI key under <code>Options &gt; ETAPI &gt; Create new ETAPI token</code>.</p> <p>Allowed fields: <code>[\"version\", \"notesCount\", \"dbSize\"]</code></p> <pre><code>widget:\n  type: trilium\n  url: https://trilium.host.or.ip\n  key: etapi_token\n</code></pre>"},{"location":"widgets/services/truenas/","title":"TrueNas","text":"<p>Learn more about TrueNas.</p> <p>Allowed fields: <code>[\"load\", \"uptime\", \"alerts\"]</code>.</p> <p>To create an API Key, follow the official TrueNAS documentation.</p> <p>A detailed pool listing is disabled by default, but can be enabled with the <code>enablePools</code> option.</p> <p>To use the <code>enablePools</code> option with TrueNAS Core, the <code>nasType</code> parameter is required.</p> <pre><code>widget:\n  type: truenas\n  url: http://truenas.host.or.ip\n  username: user # not required if using api key\n  password: pass # not required if using api key\n  key: yourtruenasapikey # not required if using username / password\n  enablePools: true # optional, defaults to false\n  nasType: scale # defaults to scale, must be set to 'core' if using enablePools with TrueNAS Core\n</code></pre>"},{"location":"widgets/services/tubearchivist/","title":"Tube Archivist","text":"<p>Learn more about Tube Archivist.</p> <p>You must be running at least version 0.4.4</p> <p>Allowed fields: <code>[\"downloads\", \"videos\", \"channels\", \"playlists\"]</code>.</p> <pre><code>widget:\n  type: tubearchivist\n  url: http://tubearchivist.host.or.ip\n  key: tubearchivistapikey\n</code></pre>"},{"location":"widgets/services/unifi-controller/","title":"Unifi Controller","text":"<p>Learn more about Unifi Controller.</p> <p>(Find the Unifi Controller information widget here)</p> <p>You can display general connectivity status from your Unifi (Network) Controller.</p> <p>Warning</p> <p>When authenticating you will want to use a local account that has at least read privileges.</p> <p>An optional 'site' parameter can be supplied, if it is not the widget will use the default site for the controller.</p> <p>Allowed fields: <code>[\"uptime\", \"wan\", \"lan\", \"lan_users\", \"lan_devices\", \"wlan\", \"wlan_users\", \"wlan_devices\"]</code> (maximum of four). Fields unsupported by the unifi device will not be shown.</p> <p>Hint</p> <p>If you enter e.g. incorrect credentials and receive an \"API Error\", you may need to recreate the container or restart the service to clear the cache.</p> <pre><code>widget:\n  type: unifi\n  url: https://unifi.host.or.ip:port\n  site: Site Name # optional\n  username: user\n  password: pass\n  key: unifiapikey # required if using API key instead of username/password\n</code></pre>"},{"location":"widgets/services/unmanic/","title":"Unmanic","text":"<p>Learn more about Unmanic.</p> <p>Allowed fields: <code>[\"active_workers\", \"total_workers\", \"records_total\"]</code>.</p> <pre><code>widget:\n  type: unmanic\n  url: http://unmanic.host.or.ip:port\n</code></pre>"},{"location":"widgets/services/unraid/","title":"Unraid","text":"<p>Learn more about Unraid.</p> <p>The Unraid widget allows you to monitor the resources of an Unraid server.</p> <p>Minimum Requirements:</p> <ul> <li>Unraid 7.2 -or- Unraid Connect plugin 2025.08.19.1850</li> <li>API key with the ADMIN role: Managing API Keys</li> </ul> <p>The widget can display metrics for selected Unraid pools. If using one of the \"pool\" fields, you must also add the pool name to the settings.</p> <p>Allowed fields: <code>[\"cpu\",\"memoryPercent\",\"memoryAvailable\",\"memoryUsed\",\"notifications\",\"arrayFree\",\"arrayUsedSpace\",\"arrayUsedPercent\",\"status\",\"pool1UsedSpace\",\"pool1FreeSpace\",\"pool1UsedPercent\",\"pool2UsedSpace\",\"pool2FreeSpace\",\"pool2UsedPercent\",\"pool3UsedSpace\",\"pool3FreeSpace\",\"pool3UsedPercent\",\"pool4UsedSpace\",\"pool4FreeSpace\",\"pool4UsedPercent\"]</code></p> <pre><code>widget:\n  type: unraid\n  url: https://unraid.host.or.ip\n  key: api-key\n  pool1: pool1name # required only if using pool1 fields\n  pool2: pool2name # required only if using pool2 fields\n  pool3: pool3name # required only if using pool3 fields\n  pool4: pool4name # required only if using pool4 fields\n</code></pre>"},{"location":"widgets/services/uptime-kuma/","title":"Uptime Kuma","text":"<p>Learn more about Uptime Kuma.</p> <p>As Uptime Kuma does not yet have a full API the widget uses data from a single \"status page\". As such you will need a status page setup with a group of monitored sites, which is where you get the slug (the url without the <code>/status/</code> portion). E.g. if your status page is URL http://uptimekuma.host/status/statuspageslug, insert <code>slug: statuspageslug</code>.</p> <p>Allowed fields: <code>[\"up\", \"down\", \"uptime\", \"incident\"]</code>.</p> <pre><code>widget:\n  type: uptimekuma\n  url: http://uptimekuma.host.or.ip:port\n  slug: statuspageslug\n</code></pre>"},{"location":"widgets/services/uptimerobot/","title":"UptimeRobot","text":"<p>Learn more about UptimeRobot.</p> <p>To generate an API key, select <code>My Settings</code>, and either <code>Monitor-Specific API Key</code> or <code>Read-Only API Key</code>.</p> <p>A <code>Monitor-Specific API Key</code> will provide the following detailed information for the selected monitor:</p> <ul> <li>Current status</li> <li>Current uptime</li> <li>Date/time of last downtime</li> <li>Duration of last downtime</li> </ul> <p>Allowed fields: <code>[\"status\", \"uptime\", \"lastDown\", \"downDuration\"]</code>.</p> <p>A <code>Read-Only API Key</code> will provide a summary of all monitors in your account:</p> <ul> <li>Number of 'Up' monitors</li> <li>Number of 'Down' monitors</li> </ul> <p>Allowed fields: <code>[\"sitesUp\", \"sitesDown\"]</code>.</p> <pre><code>widget:\n  type: uptimerobot\n  url: https://api.uptimerobot.com\n  key: uptimerobotapitoken\n</code></pre>"},{"location":"widgets/services/urbackup/","title":"UrBackup","text":"<p>Learn more about UrBackup.</p> <p>The UrBackup widget retrieves the total number of clients that currently have no errors, have errors, or haven't backed up recently. Clients are considered \"Errored\" or \"Out of Date\" if either the file or image backups for that client have errors/are out of date, unless the client does not support image backups.</p> <p>The default number of days that can elapse before a client is marked Out of Date is 3, but this value can be customized by setting the <code>maxDays</code> value in the config.</p> <p>Optionally, the widget can also report the total amount of disk space consumed by backups. This is disabled by default, because it requires a second API call.</p> <p>Note: client status is only shown for backups that the specified user has access to. Disk Usage shown is the total for all backups, regardless of permissions.</p> <p>Allowed fields: <code>[\"ok\", \"errored\", \"noRecent\", \"totalUsed\"]</code>. Note that <code>totalUsed</code> will not be shown unless explicitly included in <code>fields</code>.</p> <pre><code>widget:\n  type: urbackup\n  username: urbackupUsername\n  password: urbackupPassword\n  url: http://urbackupUrl:55414\n  maxDays: 5 # optional\n</code></pre>"},{"location":"widgets/services/vikunja/","title":"Vikunja","text":"<p>Learn more about Vikunja.</p> <p>Allowed fields: <code>[\"projects\", \"tasks7d\", \"tasksOverdue\", \"tasksInProgress\"]</code>.</p> <p>A list of the next 5 tasks ordered by due date is disabled by default, but can be enabled with the <code>enableTaskList</code> option.</p> <pre><code>widget:\n  type: vikunja\n  url: http[s]://vikunja.host.or.ip[:port]\n  key: vikunjaapikey\n  enableTaskList: true # optional, defaults to false\n</code></pre>"},{"location":"widgets/services/wallos/","title":"Wallos","text":"<p>Learn more about Wallos.</p> <p>If you're using more than one currency to record subscriptions then you should also have your \"Fixer API\" key set-up (<code>Settings &gt; Fixer API Key</code>).</p> <p>Please Note: The monthly cost displayed is the total cost of subscriptions in that month, not the \"monthly\" average cost.</p> <p>Get your API key under <code>Profile &gt; API Key</code>.</p> <p>Allowed fields: <code>[\"activeSubscriptions\", \"nextRenewingSubscription\", \"previousMonthlyCost\", \"thisMonthlyCost\", \"nextMonthlyCost\"]</code>.</p> <p>Default fields: <code>[\"activeSubscriptions\", \"nextRenewingSubscription\", \"thisMonthlyCost\", \"nextMonthlyCost\"]</code>.</p> <pre><code>widget:\n  type: wallos\n  url: http://wallos.host.or.ip\n  key: apikeyapikeyapikeyapikeyapikey\n</code></pre>"},{"location":"widgets/services/watchtower/","title":"Watchtower","text":"<p>Learn more about Watchtower.</p> <p>To use this widget, Watchtower needs to be configured to enable metrics.</p> <p>Allowed fields: <code>[\"containers_scanned\", \"containers_updated\", \"containers_failed\"]</code>.</p> <pre><code>widget:\n  type: watchtower\n  url: http://your-ip-address:8080\n  key: demotoken\n</code></pre>"},{"location":"widgets/services/wgeasy/","title":"Wg-Easy","text":"<p>Learn more about Wg-Easy.</p> <p>Allowed fields: <code>[\"connected\", \"enabled\", \"disabled\", \"total\"]</code>.</p> <p>Note: by default <code>[\"connected\", \"enabled\", \"total\"]</code> are displayed.</p> <p>To detect if a device is connected the time since the last handshake is queried. <code>threshold</code> is the time to wait in minutes since the last handshake to consider a device connected. Default is 2 minutes.</p> Wg-Easy API Version Homepage Widget Version &lt; v15 1 (default) &gt;= v15 2 <pre><code>widget:\n  type: wgeasy\n  url: http://wg.easy.or.ip\n  version: 2 # optional, default is 1\n  username: yourwgusername # required for v15 and above\n  password: yourwgeasypassword\n  threshold: 2 # optional\n</code></pre>"},{"location":"widgets/services/whatsupdocker/","title":"What's Up Docker","text":"<p>Learn more about What's Up Docker.</p> <p>Allowed fields: <code>[\"monitoring\", \"updates\"]</code>.</p> <pre><code>widget:\n  type: whatsupdocker\n  url: http://whatsupdocker:port\n  username: username # optional\n  password: password # optional\n</code></pre>"},{"location":"widgets/services/xteve/","title":"Xteve","text":"<p>Learn more about Xteve.</p> <p>Allowed fields: <code>[\"streams_all\", \"streams_active\", \"streams_xepg\"]</code>.</p> <pre><code>widget:\n  type: xteve\n  url: http://xteve.host.or.ip\n  username: username # optional\n  password: password # optional\n</code></pre>"},{"location":"widgets/services/zabbix/","title":"Zabbix","text":"<p>Learn more about Zabbix. The widget supports (at least) Zabbix server version 7.0.</p> <p>Allowed fields: <code>[\"unclassified\", \"information\", \"warning\", \"average\", \"high\", \"disaster\"]</code>.</p> <p>Only 4 fields can be shown at a time, with the default being: <code>[\"warning\", \"average\", \"high\", \"disaster\"]</code>.</p> <pre><code>widget:\n  type: zabbix\n  url: http://zabbix.host.or.ip/zabbix\n  key: your-api-key\n</code></pre> <p>See the Zabbix documentation for details on generating API tokens.</p>"}]}